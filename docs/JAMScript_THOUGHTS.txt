JAMScript Thoughts

How do we incorporate fault tolerance into JAMScript?

IDEA: Use logging in JAMScript.. to log errors, exceptions, etc.

IDEA: Use Stack traces to specify where in the call stack the error happened.
C would not support this natively. We need JAMScript runtime supporting call stacks
and printing out stack traces. This might add fault locationing to the code.

IDEA: Stick to RPC as the basic paradigm. Can we extend on the "jamdef" signature?
This way the RPC call will be broken into a three stage pipeline. Client-Intermediate-Server.

TODO: What can be done at the intermediate node? This can be programmed in JAMScript.
So the intermediate is going to be solely JAMScript programmed.

Using this model, we can make a C/C++ -> JavaScript or JavaScript -> C/C++ call through
JAMScript. The JAMScript could do the following

= Filtering of calls
= Aggregation of calls
= Transformation of calls or parameters
= Replying to calls preemptively
= Other possibilities

== Can we improve the reliability of RPC using the intermediate model? At first glance,
it seems using an intermediate node decreases the overall reliability. Is this actually true?

TODO: Call stack tracing could be turned on as part of the machine definition. One part
of the call stack tracing might be to log abnormal situations. Can we also use this for
watch dog timer type of exceptions?

TODO: Challenge #1
JavaScript is a dynamically typed langauge and C/C++ is statically typed.
Combining these two are bound to bring some very interesting problems which are yet
to be fully investigated here. I guess we will sidestep these issues for now. However,
we need to discuss them and ensure we are not looking at insurmountable problems down
the road.

If you have any thoughts on this challenge, please bring it to the discussion.

IDEA: SDM and Global State
The SDM is a distributed machine that contains the things - several independent computing
devices and the cloud computer. We can have disconnection such that parts of the computing
devices cannot talk with others. To deal with disconnection, we have to update or commit
the state updates locally and then have a global consistency protocol that makes things
consistent after the system has healed the disconnection.

Challenge #2: This could be fairly involved. May be we don't need this right away.
One way to address the consistency problem is to take a functional approach and version
the updates. So we are not updating any shared values. We are just versioning the data
with every update. May be we can repurpose a "git" program for this purpose.

=======

jamservice - define service endpoint what can invoked an RPC.
jammodel -
jamview -

jamsay
jamlisten
jamrequire

jamdefine
jamcall
jamtry


dsdsds

Message format

cmd:    Command String (e.g., PING, REGISTER). This gives the major operation that
        needs to be done. That is the purpose of the message.

opt:    An option that is relevant for the given command. This is highly context
        dependent.
      
actname:    The name of the sender. In most cases the name of the module that is
        sending the message. The activity name, the main thread ("MAIN") or 
        the pinging thread ("PINGER") and so on.

actid:  The activity ID. 
   
actarg:  An optional argument associated with the activity. 
        
args:   Arguments that are necessary for the given command. Some commands may not have
        any arguments.
 
 
Note: In the following section, we show the message format. The way it is described
is the following.

[[ Message format ]]

Description of the message format and where it is used.        
The [[ ]] are not part of the message format. 

Register a device in a Fog/Cloud
================================

Phase One:
==========
Create a unique device_serial and send the following request to the fog/cloud.
This request needs to be sent to the /admin/request/all topic.

[[ REGISTER DEVICE app_name _ device_serial ]]

The broker will check the device_id in its table. If it is found in the table, 
sends the following message to /admin/announce/all. 

[[ REGISTER-ACK OLD broker_serial device_id device_serial ]]

This tells the device that a device is already registered with the same device_serial.
The device could generate another device_serial and retry the registration until it
gets the following message in /admin/announce/all.

[[ REGISTER-ACT NEW broker_serial device_id device_serial reg_time]]

When this message is sent out, the broker maintains a binding between the device_id and
device_serial in its memory. We might need two associative tables for both directions.

Device disconnects from the broker and connects for Phase Two.

Phase Two:
==========
Connect with LWT. The LWT message is setup to announce departure in /admin/announce/all.

Then the client proceeds with the normal activity. 

Crashing broker
===============
What if the broker crashes and reboots? All the soft state is lost in the broker. 
The broker sends the following message to /admin/announce/all.

[[ REBOOT BROKER broker_serial _ _ reboot_time ]]

The broker sends this message to the announce list for sometime expecting the nodes
to pick it up and respond with new registration messages. So the responsibility
to maintain a current registration is left to the device. 


Remote Execution from C to J (Synchronous)
==========================================

We assume that the device has a valid registration with the broker. 
Also the device has already subscribed to the following topics.

/admin/announce/all
/level/func/reply/all
/level/func/reply/device_id

The device sends the following message to /level/func/request.

[[ REXEC-SYN condition-string/- actname actid device_id args ]]

Only the broker is subscribing to this channel. So it gets the request.

The broker replies to the device with the following messages depending
on whether it successfully started the activity or not.

The reply is sent to the /level/func/reply/device_id

Broker sends this on success:

[[ REXEC-ACK - ACTIVITY actid device_id lease-value (arg0) ]]

Sends this on failure:

[[ REXEC-NAK - ACTIVITY actid device_id error-code (arg0) ]]

After some time given by the lease-value, the device can get back
to the broker with the following message asking for the return
value.

The device sends the following to /level/func/request

[[ REXEC-RES GET actname actid device_id ]]

And the reply comes to /level/func/reply/device_id

[[ REXEC-RES PUT ACTIVITY actid code-type return-code ]] 

TODO: We need another version to extend the lease to handle the situation where the
result is not yet ready.


Remote Execution from C to J (Asynchronous)
===========================================

To execute a C-to-J asynchronously, the device issues the following command
to the /level/func/request topic.

[[ REXEC-ASY condition-string/- actname actid device_id args ]]

The broker will respond with one of the following replies in /local/func/reply/device_id.

On success:
[[ REXEC-ACK ASY ACTIVITY actid device_id lease-value (arg0) ]]

On failure:
[[ REXEC-NAK ASY ACTIVITY actid device_id error-code (arg0) ]]

There is no waiting for the reply or requesting for the reply.


J Machine Execution
===================

All function executions in the JAM machine are subjected to the following rules.

A function execution can be of two types: synchronous or asynchronous.
By default a statement is actually asynchronous. That is, you run a function in the
J machine, it just runs on a particular node (cloud or fog) without invoking any
synchronization overhead. When we mark the function declaration with a
'jsync', the function becomes synchronous. Calling that function causes a machine-wide
synchronization. That is the whole tree undergoes a synchronization. 

# There are some discarded thoughts here. Earlier I thought that we could use 
# promotion to determine which functions are synchronous and which are not. For
# instance a function with a synchronous call inside it is synchronous. 
# I ditched this idea because I thought it would be programmer unfriendly. 
# You need to watch out for promotions. 
###
# With the current setup, each function is marked independently as synchronous or
# asynchronous. So, we can react differently for functions that are synchronous.

###
# We have J-J and J-C. What is the difference?
# J-C: We are exporting the C functions so that they could be called from the J side.
# The compiler has already written a wrapper so that the runtime can call the J function
# which actually triggers the C function.
##  
# The J-C and J-J have no difference here. Surprise! 
# How does the last step take place in J-C execution? The function to execute is pushed into the /machine/func/request
# The submachine is receives the announcement and tries to execute it. What is the differences between a J-J and J-C?
# J-J: get the announcement and run it
# J-C: get the announcement and run it; there may not be much difference. The announcement is coming from
# a J node. The C node runs the function. How does it interpret things? 

For asynchronous J machine execution:
=====================================

Announce the following command in the /machine/func/request topic. 
Any underlying (sub) machine would subscribe to that channel and get the command.

[[ REXEC-ASY src funcname actid device_id args ]]

The above command is calling the receiver to run funcname(args) in an asynchronous
manner. 

The receiver is expected to publish an acknowledgement like the following in 
/machine/func/reply so that the initiator knows that the announced request has triggered
certain number of actions on several receivers. 

[[ REXEC-ACK ASY funcname actid device_id lease_time (arg0) ]]

There is no negative acknowledgements here. The sender can inject the call for execution and
then count the number of replies (acknowledgements) it has received. If the sender hasn't received
sufficient acknowledgements it could re-inject the call for execution. 


For synchronous J machine execution:
====================================

This is bit problematic! We need to perform the synchronization. 
The root will try to synchronize the participating nodes. How??

        Protocol Sketch
        ===============
        The first step is for the root to request synchronization among all the participating nodes
        by pushing the following command in /machine/sync/request.
        
        = Request synchronization     
        [[ REQ-SYN src condition-string/- actid device_id time_limit (arg0) ]]

        Here src could be CLOUD or FOG. 

        Synchronization is requested for performing activity (actid) by device (device_id). Remember 
        clouds and fogs could have device_id too. The device_id in that case is a unique serial number of the
        actual element that is originating the command. 

        We are also sending a 'condition-string' that specifies the JCOND statement for restricting the
        synchronization request.         

        The sub-machines (fogs or devices) can respond with one of the following commands in 
        /machine/sync/reply 

        = Available to synchronize by advertising the time slots that are available for synchronization
        [[ AVAI-SYN src - actid device_id number-of-slots (slot-list) ]] 

        Here src could be FOG or DEVICE. That is the element that is replying to the request for 
        synchronization.

        Here slot-list is an array of tuples. Each tuple has two values: slot time and preference. 
        The slots start at predefined time points at which the sub-machine is willing to synchronize. 
        The slot time possibilities are defined by the machine. 
        For example, at the beginning of every second, every multiple of 5 seconds,
        every multiple of 10 seconds, etc. A device or fog that joins the machine is either accepting the policy
        or renegotiating it and comes to a global agreement. So there is a global value for the slot start times.

        = Synchronization request is not applicable because the condition-string evaluated to false. 
        The node sends the response with an empty list of time slots. 
        [[ NOTAPP-SYN src - actid device_id ]] 

        Here src could be FOG or DEVICE. That is the element that is replying to the request for 
        synchronization.

        Each node receiving the availability slots from its sub machine elements 
        will formulate its own reply and
        propagate it up the tree. For instance, if the REQ-SYN was generated by the cloud, 
        a fog node can receive all the replies from its devices and formulate the best 
        synchronization slots for its devices and propagates the answer upwards towards the
        cloud. 

        The originator of the REQ-SYN would generate the schedule: PRIMARY and BACKUP schedules
        and send them down. The schedule is an ordered slot times in the same format that was
        used by the devices and fogs to relay their preferences. The preferences this time is
        the global utility. The first one in the list should have the highest global utility. 

        To request the synchronization schedule the requester would inject the following
        command into /machine/sync/notify.

        [[ SYNC-SCHED src - actid device_id number-of-schedules (schedule-list) ]]

        ## Note that /machine/sync/notify is a downward channel and /machine/sync/reply is an
        upward channel. 

        The elements of the sub machines that are going to synchronize according to the requested
        schedule reply like the following.

        [[ SYNC-ACK src - actid device_id number-of-schedules (schedule-list) ]]

        Here the sub machine elements are responding with one or two schedule slots that they
        are willing to synchronize on. 

        This ends the synchronization phase of the protocol. Now the initiator has a sychronized
        sub machine (i.e., the portion of the machine that is willing to engage at the given time.
        The rest of the machine are doing a computational task or they are going to end up cancelling
        whatever the actions they are doing because once the synchronous tree task gets underway
        no asynchronous action that started earlier can complete. 

J to C (Synchronous) Execution
==============================

Ok. We have achieved the synchronization using the above protocol. Now, we launch the execution
request in the synchronized machine.

On /machine/func/request we publish the following request for remote execution.

[[ REXEC_SYN slot-info funcname actid device_id args ]]

We are using the actid to run the funcname(args) on the synchronized machine we just created.
We are specifying the slot-info on which the devices should run the given function. 

We receive replies that indicate how long it would take for the execution to complete.

[[ REXEC-ACK - ACTIVITY actid device_id lease-value (arg0) ]]

These replies will be posted to /machine/func/reply

After the lease period, the initiator will request for the results using a GET message published
at /machine/func/request

[[ REXEC-RES GET funcname actid device_id ]]

The replies from the devices would be posted at /machine/func/reply.

[[ REXEC-RES PUT - actid code-type return-code ]] 


Other protocols
===============

We can implement protocols for terminating jobs, and finding the status, setting parameters on remote
devices using the remote execution methods. There is no need for an explicit protocol for that purpose.


Data protocols
==============

We need to develop data management protocols. This is essentially to support JDATA.

Event protocols
===============

Event management also requires its own protocols.


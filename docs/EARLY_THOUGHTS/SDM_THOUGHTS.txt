SDM Project Thoughts
====================

Some Introductory Comments: I think with the notion of SDM we are generalizing the concept
of server. Already servers are hosting scripts or scripting programs. We are generalizing
this idea in SDM to span multiple machines and different types of programs. In fact, we are
designing SDM to include event loop and many "threads". So machine at this point is designed
to accommodate event-driven and threaded computations. However, there are no blocking calls
in the machine. 

1.  SDM is a distributed virtual "machine". So what does this mean?

    We should provide primitives to start the machine. You can think it as a "server" program that
    is hosting other modules. The difference is that the server could be distributed. In one case
    it would be running in a single machine like normal servers. In another case it would be
    running across many different machines.

    So the first task is to start the machine.
        = At the cloud (or on a reliable machine with public IP) we start an intance of the master
          node. The address of the master node is known to everyone. There could be more than one
          master node. The master nodes could be backing up each other. We don't need to worry about
          it for now.

        = At each participating node, we start a slave. When the SDM is deployed in a single physical
          machine, we could be creating slaves as processes in the same machine.


    When a machine is up and running we have at least one master process and group of slave processes.
    Note: slaves and masters could be running on the same machine.

2.  We should be able to load and unload programs into SDM.

    Remember we are talking about JAMScript programs. These programs have native code compiled into
    shared libraries (.o) and JavaScript function collections. We need to load the program into SDM.
    The best way is to create an archive format. All the .o and .js files are zipped into an archive with
    a MANIFEST file (in XML or JSON). Using the MANIFEST file we can provide meta information that needed
    for the loading process.

    The .o files hold code that should be loaded into the slaves. The slaves are already running so we need
    to open using a shared library opening or loading command. After the loading procedure is complete, the
    functions defined in the .o files should become available at the slave.

    We also need to figure out way of unloading the functions after they are not needed. We are not talking
    about any automatic unloading process, it is triggered by a manual command invocation.

    When you load a JAMScript executable (a .zip archive) some portions get loaded into the slaves and others
    get loaded into the master.

3.  Set of machine functions.

    In a networked machine, you have commands like ifconfig to find out the address of the machine, whether it
    is actually on the network, and which network it is connected and so on.

    In SDM, each process should be able to find out various attributes of the machine. Some are as follows:

          = Find the address and may be other attributes of the master.
          = Find how many master replicas are there if there are many (may be not implemented now).
          = Find the slave addresses including the one where the current program is located.
          = Determine the disconnection state of the machine. That is, whether any members of the machine
            are offline now.

4.  We should be able to start and stop programs in SDM.

    I don't know how this could be done. Should we just unload the programs? How can we unload a program when
    portions could be running on other machines? This could be an interesting problem by itself.

    I think for the "machine" notion to hold this facility is necessary. So, first we need to define what should
    be precisely done as part of this and then figure out how it could be done.

5.  Kernel emulation for program protection.

    We don't have a kernel/user space demarcation as in a traditional OS here. This demarcation is just
    a technique that has been adopted to implement the principle of least privileges in a computing system.
    When a program is executing we want to make sure it does not have more privileges than is necessary to carry
    out its tasks. So we let the program run in user-mode which limits its privileges by making it unable
    execute certain instructions that require higher level of privilege.

    So what do we do in SDM?

    What I am talking about next is limited to the Node.js part. We assume that that the machine is connected in
    hub-and-spoke model. So we can enforce the policies at the hub. Since the hub needs to send the control commands
    to the slaves at the spokes, we can make those control commands privileged. That is, sending those privileged
    commands are restricted.

    Here is how we should go about.. I think.

    There should be a protected way to maintaing the privilege level of the SDM. The privilege level of the SDM
    is basically the privilege level of the master node (the one running the Node.js). May be we could use
    the ideas of contextify to implement a protected partition of the Node.js. This protected part of the Node.js
    could hold programs and variables.

    How to set or change them? What kind of interfaces? May be we could raise an exception if there is a
    situation where an illegal access to the protected programs or variable is made.

    We need to expand on this thought to create a "system call" like interface. Or something that looks
    completely different.


6.  Stacking machines.

    I think we could extend the kernel emulation idea for stacking machines as well. This may not get implemented.
    However, it would nice to present the design as part your thesis.


7.  Some meta thoughts (incomplete)

    We should be designing the SDM with the mindset that disconnection within SDM is a normal possibility.
    Nothing is falling apart when a disconnection is detection. So we should be detecting reconnections and
    resuming activities as previously. However, there is a necessity to associate expiry times with message
    so that these messages are played out when reconnection happens unless they are relevant to the current
    situation.

    For instance, when a slave is reconnected with the master, it might be delivered by with thousands of
    exception or error messages that were generated in the past when this node was offline. So messages
    that have expired should be purged or not played when they are delivered after the delay.

Implementation Notes: I think we could use ZeroMQ as the messaging substrate. True that there is RabbitMQ
with reliability. I like ZeroMQ's simplicity. Lets start with this and then in a subsequent work we could
build reliability over it. Reliability cannot be built for arbitrary failures. There is always a failure
model against which a system is reliable. ZeroMQ is already geared to address some of them with little
bit of help.


Cancellation Rule
=================

J-C Synchronous has a cancelling effect. Suppose several asynchronous actions are
running. If we go ahead with a synchronous J-C, it would cancel all the pending
asynchronous actions whether they are J-C or C-J. This is because the tree time
is going to be incremented by the synchronous J-C action. An asynchronous action
cannot have different start and end times. So we have two options: either to
differ the J-C synchronous action or cancel pending asynchronous actions.

So a tree node cannot just go ahead an select an arbitrary time to schedule the J-C 
synchronous action. It needs to be carefully scheduled. The cost is either going
to be delayed synchronous action or wasted already started asynchronous actions.

We need to balance the two and select an optimal plan to progress with the computation.

Why Cancellation?
=================

Why do we need to cancel pending asynchronous actions? 

We use tree synchronous actions to execute routines that need global cooperation
at the same time. That is all the nodes need to engage at the same time. We 
are looking at a different system state after the synchronous action. Therefore,
if an action starts with the old system state and ends with the new system state,
there is no guarantee that it would have executed properly. Therefore, we want 
to disallow such actions.

C-to-J Calls
============
    We can have two different types of C-to-J calls: synchronous and asynchronous.
    The C-to-J calls can include J functions or other J-to-C asynchronous calls.
    ####
    # No J-to-C synchronous calls from C-to-J calls. 
    # One way of explaining this restriction is by noting that J-to-C synchronous
    # is an action that is performed to create a global state change. 
    # So we restrict such capability from devices. 

J-to-C Calls
============
    Again, we have two different types of J-to-C calls: synchronous and asynchronous.
    Synchronous J-to-C calls can include C-to-J calls of both types.

    Similarly, asynchronous J-to-C calls can include C-to-J calls of both types.

J-to-J Calls
============
    J-to-J calls can be synchronous or asynchronous. However, they are restricted 
    so that it works from cloud to fog. Not from fog to cloud. 

    We should be able to implement staggered calls using this pattern. I think I will
    work on the staggered pattern afterwards. 

??




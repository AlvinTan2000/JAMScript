= Use Mosquitto MQTT broker

= Create the cloud part first. Get it working. 
= Create the fog part next. Get it working.. it should connect
  to the cloud part. Use the defined protocol. 

= Write the NodeJS side of the system according to the protocol
= Write the C side of the system according the protocol
= Integrate and test
= Debug and ensure the full compliance of the Remote execution protocol
= Test with multiple configurations
= Test the failure or disconnection tolerance of the protocol
= Test the scalability of the protocol
= Benchmarking experiments..

===========================
JSERVER Implementation Plan

= Get command options
= Get device parameters
= Get/set machine registry
= Set machine state
    Following values are maintained: IP address, type, connection state, last disconnection
    IP address and disconnection/connection are tracked periodically. We can setup a callback
    that should be called when one or these actually changes.

= start the service daemon: processes all the major facets of admin, level and machine processing.
= start the client service: this connects to the upper level. This does not run in the cloud 

= We should be able to call sync and/or async functions from the J side. 








= Start the service
= Start the client - it does the registration at the start
= The registration does the tree joining. Note
  the parent in the machine state. 

= 

= C-J implementation: lift from the old one - revisions to use
  MQTT instead of Nanomsg

= J-C implementation: get the Async done.

= J-C Sync ?? Challenging..

### In the C-J/J-C, we might have to export a "wait for" condition. This
# condition could be created by the compiler. The up-tree node waits
# for the satisfaction of that condition before proceeding with the 
# execution of the requested function.
### Decide which way we need to have the wait-for condition. should
# it be up-tree or down-tree or both?
# Seems like up-tree is less important than down-tree. 
# Need to come up with a proper implementation.




 


=========
JSERVER Machine state

= Create a machine state and maintain that at each J node.
    = nodetype - cloud, fog, device
    = deviceId - device ID
    = deviceAddr - IPv4 address of the device (can change)
    = cloudsize - estimate of the nodes in the cloud (could be stale)
    = fogsize - estimate of the nodes in the fog (could be stale)









===========================

JDATA Implementation Plan

= We should be able to generate synchronization conditions to handle RAW 
dependencies. 

JEVENT Implementation Plan

JCOND Implementation Plan


==========================
Fault and disconnection tolerance and what are we doing about it?

Disconnection tolerance is built into the JAM protocol design. The 
asynchronous protocol can progress in a staggered manner to aid 
in the disconnection tolerance. 

Fault tolerance is covered via disconnection tolerance and nothing special,
otherwise. 
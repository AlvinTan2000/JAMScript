JAMScript Design Notes

# Overview

The purpose of the JAMScript project is to create an orchestration language
between program segments written in two or more languages that can be running in
one or more machines. The orchestration language does not haveany processing capability
by itself. It relies on the host languages for such capabilities. In this case,
we restrict to C and JavaScript as the host languages. That means we can call C
functions from JavaScript and JavaScript functions from C using the JAMScript.
The JAMScript wants to be more than a mere remote procedure call implementation that
allows calls across different languages. We want JAMScript to provide comprehensive
runtime for integration between C and JavaScript program segments in an Internet
of Things environment.

The Internet of Things (IoT) environment poses some unique problems. We have highly
heterogeneous collection of computing elements in IoT - ranging from highly
processing and memory constrained devices to fully-fledged computing devices. A system
that is made up of these devices are bound to experience partitioning often because
some devices can disconnect due to mobility or go offline to save battery power.
Therefore, we need to identify system partitioning and determine the largest component
among the active elements and perform processing within it.



# JAMScript Basics

= Activities as the basic element.
= Define an activity which is a sequence of computation in different languages
= Launch the activities - they occur in parallel and they go asynchronously from the launching
  thread (main thread)

= Can get the state of the activities
= Can cancel activities

= Waiting on the activities -- how to? Asynchronous should be the way to go.
  With asynchronous wait, we could implement all forms of fork-join graphs.









Just calling functions can be achieved very simply

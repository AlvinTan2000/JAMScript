Testing Schedule
================

J2C (Sync calls) bug
--------------------
* There is a synchronization bug in J2C. After sometime the C side is stopping 
  responding to calls from the J side. This bug get activated in the mobility scenario.
  Does not get activated in the static scenario. There are few issues that contribute 
  to this bug. The send from the C side is failing. We need to buffer the writes to the 
  network. The writes from the queue are emptied after the network interface becomes 
  available. This way we can avoid the write error to an invalid interface.

  Also, check whether a write failure can lead to hanging thread. That is a user-level
  thread that is not released. This way after certain number of failures we run out 
  of threads. We could keep counting the number of errors and see where we end of 
  losing the responses. 


Mobility Facility
-----------------
* Function call sync versions  - J2C
* Async versions of - J2C

JData Stale Data
----------------
* How do we define stale data?
* What impact this has in tensorflow integration?
* Check flow integration - use that as a stepping stone into TensorFlow

Interlock for Broadcasts
------------------------
* JData and JCond working together. 
* Interlock is only needed with JData and JCond interplay
* Check broadcast and J2J call or J2C call.

Adaptive Machine Height (New Feature)
-------------------------------------
* We need to select the best height for the machine. How to do that? 
* What is the height selection function?

Related to the Above
--------------------
* Do we need to execute things in the submachine? That too after the 
  apex of the machine has executed the operation? This is the way the 
  semantics is setup now. 


C-side Threading Latency
------------------------
* Why the delays in the C side. What impact in the thread creation?
* Can we resolve this problem?

Applications in JAMScript 
-------------------------
* Dust up the vehicular networking applications 


Duplicate Detection Mechanism
-----------------------------
* In the J side, we have a naive duplicate detection mechansim in place. 
  Can we improve on this mechanism? In particular can we garbage collect so that 
  the cache does not keep building up? How to do this efficiently?

* In the C side, things are not working? How do we get an efficient cache going 
  in the C side? We can use the lwan code.. can we?


C2J Bug
-------
* calling a J side function with no argument from C is not working.
  We get a segmentation fault when calling a J function with no argument.


Reorganize the Sync Processing at C
-----------------------------------
* Looks like there is a problem if the messages could be dropped.
  We need to be resilient to message dropping. 



1. RPC Fault Tolerance

   It seems RPC fault tolerance is pretty hard when server, client, and network failures can
   occura at the same time. This is the situation with IoT. 

   We consider a hub-based IoT model, where the hub is responsible for launching the RPC calls. 
   So the hub is the 'client' for the calls and the actual 'thing' is the 'server'. 
   We assume that the hub is actually very reliable - we kind of assume that is perfectly reliable.
   The 'things' can fail (i.e., crash or their communication can get disconnected).

   we cannot get perfect reliability here. The goal is to maximize the conditional reliability.

   We assume that the primary source of failure is thing failure. Can we tweek the protocols such
   that when we detect failure at the hub, the thing would have actually failed. That is we want to 
   minimize the possibility that the thing could have executed the call yet we decide it as a failure. 


   Could we leverage the asymmetric failure and design and protocol that is better than existing ones?

   Key idea: things always assume the 'hub' to be up. Things never timeout on the hub. They just
   send a message and assume it to have reached the hub. We could have message transmission failures due
   to collisions and such but we assume that a success can be scored if the message is sent multiple times.
   
   Thing to hub messaging:
   	 = At the beginning of the execution
	 = At the end of the execution
	 = Periodic (at event) notifications that say what was executed previously.

	 To implement 'what was executed', we need a sequence number on the 



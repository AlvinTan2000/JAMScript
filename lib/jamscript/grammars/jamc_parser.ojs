
/**
 * Copyright (c) 2015 Muthucumaru Maheswaran <mahes25@gmail.com>
 *
 * See the LICENSE file at the root of the project for the full license.
 *
 */


// Dependencies
var CParser     = require('../../c/grammars/c_parser.ojs'),
    ES5Parser   = require('../../../deps/es5/grammars/es5_parser.ojs'),
    __          = require('../nodes.js');
var namespace_funcs = [];
var sync_funcs      = [];

/**
 * C side of the JAMScript language..
 * Full definition of the grammar. This one extends the C parser
 */


ometa JAMCParser <: CParser  {

    namespace_spec  = "in" "Id":s                                       -> __.NamespaceSpec().name(s.value()),

    requires_spec   = "requires" "Id"+:t                                -> __.RequiresSpec(t),

    type_spec       = "jcallback":s                                     -> __.TypeSpec().type(s.value())
                    | ^type_spec,

    jamd_async_decl = "jasync" decl_specs:s declarator:d
                                    namespace_spec?:ns                  -> {this.addToNameSpace(d, ns); __.JDeclaration(s, d, ns).sync(false)},

    jamd_sync_decl  = "jsync" decl_specs:s declarator:d
                                    namespace_spec?:ns                  -> {this.addSyncFunc(d,ns);this.addToNameSpace(d, ns); __.JDeclaration(s, d, ns).sync(true)},

    c_as_activity   = jamd_async_decl:d compound_stmt:s                 -> __.ActivityDef(d, s).type("c"),

    js_as_activity  = jamd_async_decl:d ES5Parser.block:b               -> __.ActivityDef(d, b).type("js"),

    c_s_activity    = jamd_sync_decl:d compound_stmt:s                  -> __.SyncActivityDef(d, s).type("c"),

    js_s_activity   = jamd_sync_decl:d ES5Parser.block:b                -> __.SyncActivityDef(d, b).type("js"),

    async_activity  = c_as_activity
                    | js_as_activity,

    sync_activity   = c_s_activity
                    | js_s_activity,

    activity_def    = sync_activity
                    | async_activity,

    function_def    = activity_def
                    | ^function_def,

    external_decl   = function_def
                    | declaration,

    program         = external_decl+
}

JAMCParser.addSyncFunc = function(decl, namespace) {
    var funcName = decl[1].name;
    if(namespace != undefined) {
        funcName = namespace[1].name + "." + funcName;
    }
    sync_funcs.push(funcName);
}
JAMCParser.addToNameSpace = function(decl, namespace) {
    if(namespace != undefined) {
        var namespace_name = namespace[1].name;
        if(namespace_funcs.indexOf(namespace_name) == -1) {
            namespace_funcs[namespace_name] = [];
        }
        namespace_funcs[namespace_name].push(decl[1].name);
    }
}

JAMCParser.parse = function(input) {

    // Add JAMScript C side keywords..
    this.spec.addKeywords(["jasync", "jsync", "in", "oncomplete", "onerror", "oncancel", "onload", 
    	"onwatch", "live", "jcallback", "requires", "until"]);

    return {
        tree: JAMCParser.matchAll(input, 'program'), 
        data: {
            'namespace_funcs': namespace_funcs,
            'sync_funcs': sync_funcs
        }
    };
};

module.exports = JAMCParser

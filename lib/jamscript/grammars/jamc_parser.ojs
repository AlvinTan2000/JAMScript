
/**
 * Copyright (c) 2015 Muthucumaru Maheswaran <mahes25@gmail.com>
 *
 * See the LICENSE file at the root of the project for the full license.
 *
 */


// Dependencies
var CParser     = require('../../c/grammars/c_parser.ojs'),
    ES5Parser   = require('../../../deps/es5/grammars/es5_parser.ojs'),
    __          = require('../nodes.js');


/**
 * C side of the JAMScript language..
 * Full definition of the grammar. This one extends the C parser
 */


ometa JAMCParser <: CParser  {

    namespace_spec  = "in" "Id":s                                       -> __.NamespaceSpec().name(s.value()),

    type_spec       = "jcallback":s                                     -> __.TypeSpec().type(s.value())
                    | ^type_spec,

    jamd_async_decl = "jamdef" decl_specs?:s declarator:d
                                    namespace_spec?:n                   -> __.JDeclaration(s, d, n).sync(false),

    jamd_sync_decl  = "jamsync" decl_specs?:s declarator:d
                                    namespace_spec?:n                   -> __.JDeclaration(s, d, n).sync(true),

    oncomp_decl     = type_spec:t "oncomplete" "(" param_type_lst:d ")" -> __.ODeclaration(t, d).type("complete"),

    onerror_decl    = type_spec:t "onerror" "(" param_type_lst:d ")"    -> __.ODeclaration(t, d).type("error"),

    oncancel_decl   = type_spec:t "oncancel" "(" param_type_lst:d ")"   -> __.ODeclaration(t, d).type("cancel"),

    onload_decl     = type_spec:t "onload" "(" param_type_lst:d ")"     -> __.ODeclaration(t, d).type("load"),

    onwatch_decl    = type_spec:t "onwatch" "(" param_type_lst:d ")" 
                      ["until" cond_expr:e]?                            -> __.ODeclaration(t, d).type("watch"),

    complete_block  = oncomp_decl:d ES5Parser.block:b ";"               -> __.CompleteBlock(d, b),

    error_block     = onerror_decl:d ES5Parser.block:b ";"              -> __.ErrorBlock(d, b),

    load_block      = onload_decl:d ES5Parser.block:b ";"               -> __.LoadBlock(d, b),

    complete_stmt   = oncomp_decl:d compound_stmt:s ";"                 -> __.CompleteStmt(d, s),

    error_stmt      = onerror_decl:d compound_stmt:s ";"                -> __.ErrorStmt(d, s),

    cancel_stmt     = oncancel_decl:d compound_stmt:s ";"               -> __.CancelStmt(d, s),

    load_stmt       = onload_decl:d compound_stmt:s ";"                 -> __.LoadStmt(d, s),

    watch_stmt      = onwatch_decl:d compound_stmt:s ";"                -> __.WatchStmt(d, s),


    c_as_activity   = jamd_async_decl:d "{" c_as_handlers+:h "}"        -> __.ActivityDef(d, h).type("c"),

    js_as_activity  = jamd_async_decl:d "{" js_as_handlers+:h "}"       -> __.ActivityDef(d, h).type("js"),

    c_as_handlers   = load_stmt
                    | watch_stmt
                    | complete_block
                    | error_block
                    | cancel_stmt,

    js_as_handlers  = load_block
                    | complete_stmt
                    | error_stmt,

    c_s_activity    = jamd_sync_decl:d compound_stmt:s               -> __.SyncActivityDef(d, s).type("c"),

    js_s_activity   = jamd_sync_decl:d ES5Parser.block:b             -> __.SyncActivityDef(d, b).type("js"),

    async_activity  = c_as_activity
                    | js_as_activity,

    sync_activity   = c_s_activity
                    | js_s_activity,

    activity_def    = sync_activity
                    | async_activity,

    function_def    = activity_def
                    | ^function_def
}


JAMCParser.parse = function(input) {

    // Add JAMScript C side keywords..
    this.spec.addKeywords(["jamdef", "jamsync", "in", "oncomplete", "onerror", "oncancel", "onload",
                 "onwatch", "live", "jcallback"]);

    return JAMCParser.matchAll(input, 'function_def');
};

module.exports = JAMCParser


/**
 * Copyright (c) 2015 Muthucumaru Maheswaran <mahes25@gmail.com>
 *
 * See the LICENSE file at the root of the project for the full license.
 *
 */


// Dependencies
var CParser     = require('../../c/grammars/c_parser.ojs'),
    ES5Parser   = require('../../../deps/es5/grammars/es5_parser.ojs'),
    __          = require('../nodes.js');


/**
 * C side of the JAMScript language..
 * Full definition of the grammar. This one extends the C parser
 */


ometa JAMCParser <: CParser  {

    namespace_spec  = "in" "Id":s                                       -> __.NamespaceSpec().name(s.value()),

    type_spec       = "jcallback":s                                     -> __.TypeSpec().type(s.value())
                    | ^type_spec,

    jamd_async_decl = "jamdef" decl_specs?:s declarator:d
                                    namespace_spec?:n                   -> __.JDeclaration(s, d, n).sync(false),

    jamd_sync_decl  = "jamdef" "sync" decl_specs?:s declarator:d
                                    namespace_spec?:n                   -> __.JDeclaration(s, d, n).sync(true),

    oncomp_decl     = "oncomplete" declarator:d                         -> __.ODeclaration(d).type("complete"),

    onerror_decl    = "onerror" declarator:d                            -> __.ODeclaration(d).type("error"),

    oncancel_decl   = "oncancel" declarator:d                           -> __.ODeclaration(d).type("cancel"),

    onverify_decl   = "onverify" declarator:d                           -> __.ODeclaration(d).type("verify"),

    complete_block  = oncomp_decl:d ES5Parser.block:b                   -> __.CompleteBlock(d, b),

    error_block     = onerror_decl:d ES5Parser.block:b                  -> __.ErrorBlock(d, b),

    complete_stmt   = oncomp_decl:d compound_stmt:s                     -> __.CompleteStmt(d, s),

    error_stmt      = onerror_decl:d compound_stmt:s                    -> __.ErrorStmt(d, s),

    cancel_stmt     = oncancel_decl:d compound_stmt:s                   -> __.CancelStmt(d, s),

    verify_stmt     = onverify_decl:d compound_stmt:s                   -> __.VerifyStmt(d, s),

    c_as_activity   = jamd_async_decl:j compound_stmt:s
                      complete_block:cb
                      error_block:eb
                      (cancel_stmt)?:cs
                      (verify_stmt)?:vs                                 -> __.ActivityDef(j, s, cb, eb, cs, vs).type("c"),

    js_as_activity  = jamd_async_decl:j ES5Parser.block:b
                      complete_stmt:cs
                      error_stmt:es                                     -> __.ActivityDef(j, b, cs, es).type("js"),

    c_s_activity    = jamd_sync_decl:d compound_stmt:c                  -> __.ActivityDef(d, c).type("c"),

    js_s_activity   = jamd_sync_decl:d ES5Parser.block:b                -> __.ActivityDef(d, b).type("js"),

    async_activity  = c_as_activity
                    | js_as_activity,

    sync_activity   = c_s_activity
                    | js_s_activity,

    activity_def    = sync_activity
                    | async_activity,

    function_def    = activity_def
                    | ^function_def
}


JAMCParser.parse = function(input) {

    // Add JAMScript C side keywords..
    this.spec.addKeywords(["jamdef", "sync", "in", "oncomplete", "onerror", "oncancel", "onverify",
                 "live", "jcallback"]);

    return JAMCParser.matchAll(input, 'topLevel');
};

module.exports = JAMCParser

/**
 * Copyright (c) 2015 Muthucumaru Maheswaran <mahes25@gmail.com>
 *
 * See the LICENSE file at the root of the project for the full license.
 */

// Dependencies
var CTranslator  = require('../../c/grammars/c_translator.ojs'),
    ES5Translator = require('../../../deps/es5/grammars/es5_translator.ojs'),
    join         = require('../../../utils.js').join,
    escape       = require('../../../utils.js').escape_string;

var ActivityID   = 0;

ometa JAMCTranslator <: CTranslator {

    NamespaceSpec :n = empty                                                            -> n.name(),

    JDeclaration :n = walk:s walk:d walk?:na                                            -> this.rules.JDeclaration(this, n.sync(), n[3], s, d, na),

    ODeclaration :n = ?this.context.Tracer("ODeclaration") walk:t walk*:p             -> this.rules.ODeclaration(this, n.type(), t, p),

    CompoundStmt :n = ?this.context.TarActivityCtx() walk*:d walk*:s                  -> this.rules.CompoundStmt(this, d, s)
                    | ^CompoundStmt,

    BlockStmt    :n = ?this.context.TarActivityCtx() ES5Translator.walk*:cs           -> this.rules.BlockStmt(this, cs)
                    | ES5Translator.BlockStmt,

    CompleteBlock :n = ?this.context.Tracer("CompleteBlock") walk:d ES5Translator.walk:s                                     -> this.rules.CompleteBlock(this, d, s),

    ErrorBlock   :n = ?this.context.Tracer("ErrorBlock") walk:d ES5Translator.walk:s                                       -> this.rules.ErrorBlock(this, d, s),

    LoadBlock    :n = ?this.context.Tracer("LoadBlock") walk:d ES5Translator.walk:s                                       -> this.rules.LoadBlock(this, d, s),

    CompleteStmt :n = ?this.context.Tracer("CompleteStmt") walk:d walk:s                                                     -> this.rules.CompleteStmt(this, d, s),

    ErrorStmt    :n = ?this.context.Tracer("ErrorStmt") walk:d walk:s                                                     -> this.rules.ErrorStmt(this, d, s),

    CancelStmt   :n = ?this.context.Tracer("CancelStmt") walk:d walk:s                                                     -> this.rules.CancelStmt(this, d, s),

    LoadStmt     :n = ?this.context.Tracer("LoadStmt") walk:d walk:s                                                     -> this.rules.LoadStmt(this, d, s),

    WatchStmt    :n = ?this.context.Tracer("WatchStmt") walk:d walk:s                                                     -> this.rules.WatchStmt(this, d, s),

    ActivityDef  :n = ?this.context.SetActivityCtx(n) walk:d walk*:h                   -> this.rules.ActivityDef(this, n.type(), h),

    SyncActivityDef  :n = ?this.context.SetActivityCtx(n) walk:d walk:s                -> this.rules.SyncActivityDef(this, n.type(), s)

}


JAMCTranslator.context = function() {

    var activityID = 0,
        inActivityFlag = false,
        activityCtx;

    return {
        Tracer: function(str) {
            console.log("======", str);
            return;
        },

        SetActivityCtx: function(q) {
            // TODO: Figure out how to generate trully random strings.
            activityID = Math.random().toString(36).substring(7);
            inActivityFlag = true;
            return true;
        },

        TarActivityCtx: function() {
            // Test and Reset Activity Context
            var flag = inActivityFlag;
            inActivityFlag = false;
            return flag;
        },

        GetActivityID: function() {
            return activityID;
        },

        SaveValToAC: function(val) {
            activityCtx = val;
        },

        GetValFromAC: function() {
            return activityCtx;
        },

        TestActivityCtx: function() {
            return inActivityFlag;
        }
    }
}();

JAMCTranslator.rules = {

    JDeclaration: function(that, sflag, tree, spec, decl, namespc) {
        console.log("jdec");
        var funcname = tree[1].name,
            params   = that.helpers.ParamsFromParamDecl(tree);

        that.context.SaveValToAC({
            sync: sflag,
            declspec: spec,
            fname: funcname,
            params: params,
            namespace: namespc
        });

        return sflag;
    },

    ODeclaration: function(that, otype, ret_type, params) {
        console.log("odec");
        return join(ret_type, ' ', otype, ' ', params);
    },

    // d is declarations within the compound statement
    // s is the set of statements
    CompoundStmt: function(that, d, s) {
        console.log("compoundstmt");
        var c_output = "";
        var js_output = "";
        var actx = that.context.GetValFromAC();
        // create JavaScript wrapper
        js_output += that.helpers.CreateJSWrapperFunction(actx.fname, actx.params);
        // create C function - just need to revise the declaration.. rest is OK
        c_output += that.helpers.CreateCFunction(actx.declspec, actx.fname, actx.params, join('{', d.join(''), s.join(''), '}'));

        // register the C function callback
        c_output += that.helpers.CreateCallBackHookUp(that.context.GetActivityID(), actx.fname, "activity");

        // Return object containing both C and JS components
        return {
            C: c_output,
            JS: js_output
        }
    },

    BlockStmt: function(that, cs) {
        var c_output = "";
        var js_output = "";
        var actx = that.context.GetValFromAC();

        // create JavaScript function - just need to change the function declaration from C to JS
        js_output += that.helpers.CreateJSFunction(actx.fname, actx.params, join('{', cs.join(';'), '}'));

        // create command hooking up JS function
        js_output += that.helpers.CreateJSFunctionHookUp(that.context.GetActivityID(), actx.fname, actx.namespace, "activity");

        // create a C stub function.. brand new function.. this is called locally..
        c_output += that.helpers.CreateCStubFunction(that.context.GetActivityID(), actx.fname, actx.params);

        return {
            C: c_output,
            JS: js_output
        }
    },

    LoadBlock: function(that, odecl, block) {
        var js_output = "",
            actx = that.context.GetValFromAC();

        // create the JavaScript function .. only C function declaration needs to change
        js_output += that.helpers.CreateJSFunction(actx.fname, actx.params, block);

        // Register JS function use 'activityID', 'load', function
        js_output += that.helpers.CreateJSFunctionHookUp(that.context.GetActivityID(), actx.fname, actx.namespace, "load");

        // return the code object..
        return {
            C: undefined,
            JS: js_output
        }
    },


    CompleteBlock: function(that, odecl, block) {
        var js_output = "",
            actx = that.context.GetValFromAC();

        // create the JavaScript function .. only C function declaration needs to change
        js_output += that.helpers.CreateJSFunction(actx.fname, actx.params, block);

        // Register JS function use 'activityID', 'complete', function
        js_output += that.helpers.CreateJSFunctionHookUp(that.context.GetActivityID(), actx.fname, actx.namespace, "complete");

        // return the code object..
        return {
            C: undefined,
            JS: js_output
        }
    },

    ErrorBlock: function(that, odecl, block) {
        var js_output = "",
            actx = that.context.GetValFromAC();

        // create the JavaScript function .. only C function declaration needs to change
        js_output += that.helpers.CreateJSFunction(actx.fname, actx.params, block);

        // Register JS function use 'activityID', 'error', function
        js_output += that.helpers.CreateJSFunctionHookUp(that.context.GetActivityID(), actx.fname, actx.namespace, "error");

        // return the code object..
        return {
            C: undefined,
            JS: js_output
        }
    },

    CompleteStmt: function(that, odecl, stmt) {
        var c_output = "",
            actx = that.context.GetValFromAC();

        // create the C function.. only slight revision of the function declarator
        c_output += that.helpers.CreateCFunction(actx.fname, actx.params, stmt);
        // register C function callback.. activityID, "complete", function
        c_output += that.helpers.CreateCallBackHookUp(that.context.GetActivityID(), actx.fname, "complete");

        // return the code object..
        return {
            C: c_output,
            JS: undefined
        }
    },

    ErrorStmt: function(that, odecl, stmt) {
        var c_output = "",
            actx = that.context.GetValFromAC();

        // create the C function.. only slight revision of the function declarator
        c_output += that.helpers.CreateCFunction(actx.fname, actx.params, stmt);

        // register C function callback.. activityID, "error", function
        c_output += that.helpers.CreateCallBackHookUp(that.context.GetActivityID(), actx.fname, "error");

        // return the code object..
        return {
            C: c_output,
            JS: undefined
        }
    },

    CancelStmt: function(that, odecl, stmt) {
        var c_output = "",
            actx = that.context.GetValFromAC();

        // create the C function.. only slight revision of the function declarator
        c_output += that.helpers.CreateCFunction(actx.fname, actx.params, stmt);

        // register C function callback.. activityID, "cancel", function
        c_output += that.helpers.CreateCallBackHookUp(that.context.GetActivityID(), actx.fname, "cancel");

        // return the code object..
        return {
            C: c_output,
            JS: undefined
        }
    },


    LoadStmt: function(that, odecl, stmt) {
        console.log("loadstmt");
        var c_output = "",
            actx = that.context.GetValFromAC();

        // create the C function.. only slight revision of the function declarator
        c_output += that.helpers.CreateCFunction(actx.fname, actx.params, stmt);

        // register C function callback.. activityID, "load", function
        c_output += that.helpers.CreateCallBackHookUp(that.context.GetActivityID(), actx.fname, "load");

        // return the code object..
        return {
            C: c_output,
            JS: undefined
        }
    },


    WatchStmt: function(that, odecl, stmt) {
        var c_output = "",
            actx = that.context.GetValFromAC();

        // create the C function.. only slight revision of the function declarator
        c_output += that.helpers.CreateCFunction(actx.fname, actx.params, stmt);

        // register C function callback.. activityID, "watch", function
        c_output += that.helpers.CreateCallBackHookUp(that.context.GetActivityID(), actx.fname, "watch");

        // return the code object..
        return {
            C: c_output,
            JS: undefined
        }
    },


    /** Activity matrix
     * C - sync     :   C statement, -, -, -, -
     * C - async    :   C statement, JS complete, JS error, C cancel, C verify
     * JS - sync    :   JS block, -, -, -, -
     * JS - async   :   JS block, C complete, C error, -, -
     */

    ActivityDef: function(that, atype, handlers) {
        console.log("act def", atype);
        // console.log(handlers);
        var actx = that.context.GetValFromAC();

        var handlerCount = [];
        handlerCount["CompleteBlock"] = 0;
        handlerCount["ErrorBlock"] = 0;
        handlerCount["LoadBlock"] = 0;
        handlerCount["CompleteStmt"] = 0;
        handlerCount["ErrorStmt"] = 0;
        handlerCount["CancelStmt"] = 0;
        handlerCount["LoadStmt"] = 0;
        handlerCount["WatchStmt"] = 0;

        for(i=0;i<handlers.length;i++) {
            handlerCount[handlers[i][0]]++
        }

        // Enforce consistency conditions.. c/js.. sync/async
        // Generate the code and return C/JS components of the generated source
        if (atype === 'c') {    // C - async
            return that.helpers.CreateOutput(handlers);
        } else if (atype == "js") {   // JS - async
            // that.helpers.AssertEmpty([cnclstmt], "Async JS activity cannot have a cancel or verify block");
            return that.helpers.CreateOutput(handlers);
        }
    },

    SyncActivityDef: function(that, atype, stmt) {
        // var actx = that.context.GetValFromAC();
        return stmt;
    }
}


JAMCTranslator.helpers = {

    ParamsFromParamDecl: function(tree) {
        var i,
            tempdecs,
            tempdecl,
            collected = [];

        for (i = 2; i < tree.length; i++) {
            tempdecs = tree[i][2];
            tempdecl = tree[i][3];
            collected.push({name: tempdecl[1].name, pointer_level: tempdecl[1].pointer_level, type: tempdecs[2][1].type});
        }
        return collected;
    },

    /**
     * HookUp a C callback for the given activity - actID,
     * The C function name is given by - fname,
     * Name of the activity is given by - activity
     * Function "call" for inserting the callback is written here.
     */
    CreateCallBackHookUp: function(actID, fname, activity) {
        return join("registerCallBack(", actID, activity, fname, ");");
    },

    /**
     * Create a C function. Only the function declaration needs to be created.
     * The statement portion of the function is already there.
     * Function name is given by - fname
     * Function parameters given by - param
     * Statement block given by - stmt
     */
    CreateCFunction: function(dspec, fname, params, stmt) {
        var ps = [];
        for (var p in params) {
            var ptrstr = "";
            for (var i = 0; i < p.pointer_level; i++)
                ptrstr += "*";
            ps.push([p.type, ptrstr, p.name].join(' '));
        }
        var a = join(dspec, ' ', fname, '(', ps.join(','), ')', stmt);
        return a;
    },

    // create the JavaScript function .. only C function declaration needs to change
    // js_output += that.helpers.CreateJSFunction(actx.fname, actx.params, block);
    CreateJSFunction: function(fname, params, block) {
        var ps = [];
        for (var p in params)
            ps.push(p.name);
        return join('function ', fname, ' (', ps.join(','), ') ', block);
    },

    // Register JS function use 'activityID', 'error', function
    // js_output += that.helpers.CreateJSFunctionHookUp(that.context.GetActivityID(), actx.fname, actx.namespace, "error");
    CreateJSFunctionHookUp: function(actID, fname, namespace, activity) {
        return join("HookUpJSFunction(", actID, activity, fname, namespace, ");");
    },

    // create a C stub function.. brand new function.. this is called locally..
    CreateCStubFunction: function(actID, dspec, fname, params) {

        var ps = [], qs = [];
        for (var p in params) {
            var ptrstr = "";
            for (var i = 0; i < p.pointer_level; i++)
                ptrstr += "*";
            ps.push([p.type, ptrstr, p.name].join(' '));
            qs.push(p.name);
        }
        var funccode = dspec + " " + fname + "(" + ps.join(', ') + ") {";

        // Write a C function to create JSON object with the parameters
        funccode += "JSONObj *j = jsoncreate(" + qs.join(', ') + ");";

        // Write a C function call to make the remote call with the JSON object
        funccode += "remotefunctioncall(" + actID + ", " + fname + ", " + "j);";

        // end
        funccode += "}";

        // return the string
        return funccode;
    },


    /**
     * This is a JS function wrapper to call a C function. Uses the same parameter names.
     * The JS function signature is slightly revised one of the C function without the type information.
     * Function name is given
     */
    // Create JavaScript wrapper
    CreateJSWrapperFunction: function(actID, fname, params) {
        var ps = [];
        for (var p in params)
            ps.push(p.name);
        var funccode = "function " + fname + " (" + ps.join(',') + ") {";

        // write the code that would create the JSON object.
        funccode += "var jobject = {";
        var i = 0;
        for (var p in params)
            funccode += "arg" + (i++) + ":" + p.name + (i < params.length? "," : "");
        funccode += "}";

        // write the code that would call the remote function
        funccode += "RemoteFunctionCall(" + actID + "," + fname + "," + "jobject" + ");";

        // write the end of the function
        funccode += "}";

        return funccode;
    },

    CreateOutput: function(arr) {
        var cout = "";
        var jsout = "";
        for(i=0; i<arr.length; i++) {
            var code = arr[i][3];
            if (!!code.C)
                cout += code.C;
            if (!!code.JS)
                jsout += code.JS;
        }
        return {'C': cout, 'JS': jsout};
    },

    AssertEmpty: function(arr, msg) {
        for (var e in arr) {
            if (!!e.C || !!e.JS) {
                console.error(msg);
                // TODO: Need to exit..
            }
        }
    }
}


JAMCTranslator.force_rules = false;
JAMCTranslator.translate = function(input) {
    return JAMCTranslator.match(input, 'walk');
};

module.exports = JAMCTranslator;

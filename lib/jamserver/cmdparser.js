const commandLineArgs = require('command-line-args');

/*
The 'jnode' is going to be started using `jamrun` (a Python program).

These options are going to be used by that program while starting the jnode.
The jnode itself is embedded in the output generated by the jamc compiler.

jnode  --device(d) --fog(-f)  --cloud(-c) --debug(-d) --log(-l)=log.txt
    --registry(-r) --app(-a)=name --port(-p)=port_number
    [--num(-n)=serial_number (optional, defaults to 1)]
*/

module.exports = new function parseArgs() {

    const optdefs = [
        {name: 'device', alias: 'd', type: Boolean},
        {name: 'fog', alias: 'f', type: Boolean},
        {name: 'cloud', alias: 'c', type: Boolean},
        {name: 'data', alias: 't', type: String},
        {name: 'app', alias: 'a', type: String},
        {name: 'tags', alias: 'g', type: String},
        {name: 'iflow', alias: 'i', type: String},
        {name: 'oflow', alias: 'o', type: String},
        {name: 'link', alias: 'l', type: String},
        {name: 'long', alias: 'x', type: Number},
        {name: 'lat', alias: 'y', type: Number},
        {name: 'port', alias: 'p', type: String, defaultValue: '1883'}
    ];

    var options;
    try {
        options = commandLineArgs(optdefs);

        // Enforce specification of 'app name'
        if (options.app === undefined) {
            console.log("ERROR! App name should be specified");
            process.exit(1);
        }

        // If fog or cloud is not specified, device is the default type
        if (!options.fog && !options.cloud)
            options.device = true;

    } catch (e) {
        console.log(e.name);
        process.exit(1);
    }


    // Parse tcp://host:port or host:port or host (port 6379 by default)
    if (options.data !== undefined) {
        var str = options.data;
        if (str.indexOf("tcp://") === 0)
            str = str.split("tcp://")[1];
        var parts = str.split(":");
        options.redhost = parts[0];
        options.redport = parts[1] || 6379;
    }

    return options;
};

const commandLineArgs = require('command-line-args');


// Here are the options. The jnode is going to be started using jamrun (a Python program).
// These options are going to be used by that program while starting the jnode.
// The jnode itself is embedded in the output generated by the jamc compiler.

// jnode  --device(d) --fog(-f)  --cloud(-c) --zone(-z)=zonename --debug(-d) --log(-l)=log.txt
//  --registry(-r) --app(-a)=name --port(-p)=port_number [--num(-n)=serial_number]
//
// serial_number is actually optional.. it starts with 1 and this value is assumed by default

module.exports = function parseArgs() {

    const optdefs = [
        { name: 'device', alias: 'd', type: Boolean},
        { name: 'fog', alias: 'f', type: Boolean},
        { name: 'cloud', alias: 'c', type: Boolean},
        { name: 'registry', alias: 'r', type: Boolean},
        { name: 'zone', alias: 'z', type: String},
        { name: 'app', alias: 'a', type: String, defaultValue: ["myApp"]},
        { name: 'log', alias: 'l', type: String},
        { name: 'port', alias: 'p', type: Number, defaultValue: 1883},
        { name: 'num', alias: 'n', type: Number, defaultValue: 1}
    ];

    // Catch exceptions..
    var options;
    try {
        options = commandLineArgs(optdefs);
        console.log(options);

        // Enforce some default parameters specifications
        if (options.app == undefined) {
            console.log("ERROR! App name should be specified");
            process.exit(1);
        }
        // If fog or cloud is not specified, device is the default type

    } catch(e) {
        console.log(e.name);
        // there was an error.. what is it?
        process.exit(1);
    }

    // Setup some more defaults
    if (!options.fog && !options.cloud)
        options.device = true;

    if (options.device)
        options.conf = "device.conf";
    else if (options.fog)
        options.conf = "fog.conf";
    else
        options.conf = "cloud.conf";

    // TODO: If the node is a fog, we need to setup the zone as well.

    return options;
};

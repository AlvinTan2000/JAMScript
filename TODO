//  = Complete Application
//  = client side (C)

  = NodeJS side
    = Create, Close, Open, Remove, .. testing
    = Inject initial functions.. testing

  = File system and control -- a web server and module server
    = Upload the JS assets to the server.
    = Make it available from there..
    = ?? How to make it available from web as well?
    = Secure this mechanism.. how??

  = Create user-defined-function signatures
  = Send the signatures at servlet creation
  = Servlets should be capable of running the functions

  = Kernel - emulated by a kernel servlet 
    = kernel servlet could be replicated
    = kernel servlet is running kernel services

//  = JSON parsing done properly.. in the client
//  = Hook the JSON parser into the Client code

  = Service verus application
    = services only run on the cloud and thing - no web component - can still be written in JAM
    = services have a JavaScript interface - support JavaScript functions

//  = Clean up existing code

= Function call
  = Client to Cloud
  = Cloud to Client         --- need event management and callback integration --- how does this work with JSON parser?
  = Client to Web
  = Web to Client
  = Cloud to Web
  = Web to Cloud

= Automate the web interface management
  = Link web to the application, web interface is just a UI for the application.
  = Use a templating library? How would this impact with SpaceOS?
  = Can we use XML or XHTML for templating? Examine the pros and cons

= Live Variables
  = Use UDP versus TCP for function calls?
  = Where would the reliability model be specified? Part of the application properties?

= Data Streaming

= Event Distribution
  = Application local events
  = Application to application events
  = To all devices (running the same application)
  = A particular device running a given application

= Debugging and Tracing Framework
  = Use this to demonstrate the framework
  = Visualize the interactions using the tracing framework

= POM and XML Schema..
  = How can we incorporate the POM ideas here?
  = What is the SpaceOS doing for us?
  = How to integrate those concepts?

= Things in JavaScript
	= Provide JavaScript interfaces for real world objects
	= Objects are not going to run NodeJS
	= Objects are running Jam runtime.
	= Jam provides a way to run a program that has C + JavaScript + XML
		= JavaScript runs on a SpaceOS/POM server
		= Messages are sent from that server to the actual object that implements the actual routine
	
// This is super vague.. we need to refine this
= Architecture design...
  = Break the architecture into small components...
  = Implement it!

=============================================
Design notes

//1. Server with the main loop.. it just calls the svlmanager
//2. svlmanager is responsible for all commands - app life cycle, servlet life cycle, etc.
//3. svlmanager is responsible for spawning individual servlets for dealing with the applications
4. application transactions - RPCs, and live variables, data streaming, eventing are handled by the servlets
5. servlets have built-in support for certain actions and they are augmented by the user program.
6. servlets are created on a per-application basis, servlets deal with a fixed set of user-defined functions
7. the user-defined functions are specified at the servlet creation time. any new functions injected into the
   servlet will be ignored due to security and authorization concerns.

8. Load the code through the main server.. we load for a particular appid

Unresolved issues

1. How to handle the web? Templating?
2. All three point interactions.. how to handle them?
3. Securing the interactions.. how to perform the authentication and authorization?

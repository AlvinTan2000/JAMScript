#!/bin/bash


die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF
Runs the JAMScript executable (.jxe) in a Docker container.

djamrun program.jxe
Runs J and C node, one each, of a device with program.jxe
under the application name 'app-N'. To run under a different
app name X, use the --app=X option.

djamrun program.jxe --fog
Runs a fog node (only J node) with program.jxe. Similarly, the --cloud
flag runs a cloud node.

By default, jamrun uses a Redis server running at 127.0.0.1:6379 as the
data store. The Redis server needs to be started before launching the
application. To use a different Redis server use the --data option.

djamrun program.jxe --data=127.0.0.1:7000
Runs program.jxe and connects it to an already running Redis server at
port 7000 of the local host. Redis server can run outside the
local host (Redis needs to the configured to accept outside
connections).

To start more than one C node at a device use the following command.
djamrun program.jxe --num=4

To provide a set of tags to the program, use the following command.
jamrun program.jxe --tag="param1, param2"

Use the --bg option to run a command in the backgroud.

Usage: djamrun file.jxe [--app=appl_name] [--fog|--cloud] [--num=num_c_devs]
                                    [--data=data-url]
                                    [--tags=quoted_list_of_tags]
                                    [--bg]


The djamrun command creates a run state in the $HOME/__jamrun folder.
EOF
}

checkdocker() {

    dockeravail=`which docker`
    if [ -z $dockeravail ]; then
        die "Docker not installed in this machine. Exiting!"
    fi
}

# runatcloud $dockid $file $jappid $data $floc $tags
runatcloud() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local floc=$5
    local tags=$6


    if [ -z $tags ]; then
        if [ -z $bg ]; then
            echo "-" > $floc/$dockid/tmuxid
            docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --cloud --data=$data
        else
            echo $dockid"-cloud" > $floc/$dockid/tmuxid
            tmux new-session -s $dockid -d docker exec -it  --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --cloud --data=$data
        fi
    else
        if [ -z $bg ]; then
            echo "-" > $floc/$dockid/tmuxid
            docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --cloud --data=$data --tag=$tags
        else
            echo $dockid"-cloud" > $floc/$dockid/tmuxid
            tmux new-session -s $dockid -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --cloud --data=$data --tag=$tags
        fi
    fi
}

# runatfog $dockid $file $jappid $data $floc $tags
runatfog() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local floc=$5
    local tags=$6

    if [ -z $tags ]; then
        if [ -z $bg ]; then
            echo "-" > $floc/$dockid/tmuxid
            docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --fog --data=$data
        else
            echo $dockid"-fog" > $floc/$dockid/tmuxid
            tmux new-session -s $dockid -d  docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --fog --data=$data
        fi
    else
        if [ -z $bg ]; then
            echo "-" > $floc/$dockid/tmuxid
            docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --fog --data=$data --tag=$tags
        else
            echo $dockid"-fog" > $floc/$dockid/tmuxid
            tmux new-session -s $dockid -d  docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --fog --data=$data --tag=$tags
        fi
    fi
}

# runatdevice $dockid $file $jappid $data $num $floc $tags
runatdevice() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local num=$5
    local floc=$6
    local tags=$7

    echo $num > $floc/$dockid/cdevs

    # Start J
    if [ -z $tags ]; then
        if [ -z $bg ]; then
            echo "-" > $floc/$dockid/tmuxid
            tmux new-session -s $dockid"-dev" -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jrun $file --app=$appid --data=$data --group=$dockid
        else
            echo $dockid"-dev" > $floc/$dockid/tmuxid
            tmux new-session -s $dockid"-dev" -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jrun $file --app=$appid  --data=$data --group=$dockid
        fi

        for i in `seq 1 $num`; do
            tmux new-session -s $dockid"-dev-"$i -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid crun $file --app=$appid  --data=$data --group=$dockid
        done

        if [ -z $bg ]; then
            tmux attach-session -t $dockid"-dev"
        fi

    else
        if [ -z $bg ]; then
            echo "-" > $floc/$dockid/tmuxid
            tmux new-session -s $dockid"-dev" -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jrun $file --app=$appid --data=$data --group=$dockid
        else
            echo $dockid"-dev" > $floc/$dockid/tmuxid
            tmux new-session -s $dockid"-dev" -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jrun $file --app=$appid  --data=$data --group=$dockid
        fi

        for i in `seq 1 $num`; do
            tmux new-session -s $dockid"-dev-"$i -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid crun $file --app=$appid  --data=$data --group=$dockid
        done

        if [ -z $bg ]; then
            tmux attach-session -t $dockid"-dev"
        fi

    fi

}


dojamrun() {
    local type=$1
    local dockid=$2
    local floc=$3
    local file=$4
    local num=$5

    echo $type > $floc/$dockid/machType
    echo $data > $floc/$dockid/dataStore
    echo $dockerSer > $floc/$dockid/dockerId
    echo "docker" > $floc/$dockid/class


    case $type in
        cloud)
            runatcloud $dockid $file $jappid $data $floc $tags
            ;;
        fog)
            runatfog $dockid $file $jappid $data $floc $tags
            ;;
        device)
            runatdevice $dockid $file $jappid $data $num $floc $tags
            ;;
    esac
}


createdir() {
    local jpath=$1
    local jdir=$2
    # set a global directory..
    dirpath=$jpath/$jdir

    if [ ! -e $jpath/$jdir ]; then
        mkdir $jpath/$jdir
    fi
}

getappid() {
    local mainf=$1
    local localf=$2

    if [ -e $mainf/counter ]; then
        local count=`cat $mainf/counter`
        ((count++))
        echo $count > $mainf/counter
    else
        local count=1
        echo $count > $mainf/counter
    fi

    if [ ! -e $localf/appid ]; then
        echo "app-"$count > $localf/appid
    fi

    jappid=`cat $localf/appid`
    dockerid="docker-"$count
}

removetmux() {
    local tmid=$1

    tmux has-session -t $tmid 2>/dev/null
    local res=$?
    if [ $res == "0" ]; then
        tmux kill-session -t $tmid
    fi
}

removedockermach() {

    local tmid=`cat $folder/$dockerid/tmuxid`
    removetmux $tmid

    if [ -e $folder/$dockerid/cdevs ]; then
        local num=`cat $folder/$dockerid/cdevs`
        for i in `seq 1 $num`; do
            removetmux $tmid"-"$i
        done
    fi

    docker kill $dockerSer
    docker rm $dockerid
}

setupdockermach() {
    local docid=$1
    local file=$2
    dockerImage=`cat $jamfolder/dockerImage`

    dockerSer=`docker run --name $docid -t -d --privileged $dockerImage`
    dockerSer=${dockerSer:0:12}
    docker cp $file $docid:`basename $2`

    trap removedockermach SIGINT
}


waitforcmd() {

    if [ -z $bg ]; then
        trap cleanuptmux SIGINT
        wait $jpid
    fi
}

processjxe() {
    result="ok"
}

# Initialize all the option variables.
app=app-n
type=device
data=127.0.0.1:6379
tags=
num=1
bg=


file=$1
shift
fext="${file##*.}"

if [ -z $file ] || [ $file = "-h" ] || [ $file = "--help" ]; then
    show_usage
    exit 1
fi

if [ "$fext" != "jxe" ]; then
    die "Extension on $file is not .jxe"
fi


while :; do
    case $1 in
        -h|-\?|--help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        -a|--app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)            # Handle the case of an empty
            die 'ERROR: "--args" requires a non-empty option argument.'
            ;;
        -s|--tags)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                tags=$2
                shift
            else
                die 'ERROR: "--tags" requires a non-empty option argument.'
            fi
            ;;
        --tags=?*)
            tags=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --tags=)            # Handle the case of an empty
            die 'ERROR: "--tags" requires a non-empty option argument.'
            ;;
        -n|--num)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                num=$2
                shift
            else
                die 'ERROR: "--num" requires a non-empty option argument.'
            fi
            ;;
        --num=?*)
            num=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --num=)            # Handle the case of an empty
            die 'ERROR: "--num" requires a non-empty option argument.'
            ;;
        -d|--data)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                data=$2
                shift
            else
                die 'ERROR: "--data" requires a non-empty option argument.'
            fi
            ;;
        --data=?*)
            data=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --data=)            # Handle the case of an empty
            die 'ERROR: "--data" requires a non-empty option argument.'
            ;;
        -f|--fog)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="fog"
                num=
            fi
            ;;
        -c|--cloud)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="cloud"
                num=
            fi
            ;;
        -b|--bg)
            bg=1
            ;;
        --)              # End of all options.
            shift
            break
        ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# Check necessary parameters and set defaults

if [ "$type" != "device" ] && [ -n "$num" ]; then
    die "number of devices can't be speciied for fog/cloud"
fi


if [ -e "$file" ]; then

    # Check whether the global __jamruns folder is there
    jamfolder=$HOME"/__jamruns"
    if [ ! -d $jamfolder ]; then
        mkdir $jamfolder
    fi
    # Get the folder
    filenoext="${file%.*}"
    folder=$HOME"/__jamruns/"$filenoext"_"$app
    if [ ! -d "$folder" ]; then
        mkdir $folder
    fi

    # process the .jxe file
    file=`pwd`/$file
    processjxe $file
    if [ $result != "ok" ]; then
        die "Problem with JAMScript executable"
    fi

    cd $folder
    getappid $jamfolder $folder
    createdir $folder $dockerid
    setupdockermach $dockerid $file $jamfolder
    dojamrun $type $dockerid $folder `basename $file` $num
    echo "Completed the run.."

else
    die "File: $file not found"
fi

#!/bin/bash


die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF
Runs the JAMScript executable (.jxe) in a Docker container.

djamrun program.jxe
Runs J and C node, one each, of a device with program.jxe
under the application name 'app-N'. To run under a different
app name X, use the --app=X option.

djamrun program.jxe --fog
Runs a fog node (only J node) with program.jxe. Similarly, the --cloud
flag runs a cloud node.

By default, jamrun uses a Redis server running at 127.0.0.1:6379 as the
data store. The Redis server needs to be started before launching the
application. To use a different Redis server use the --data option.

djamrun program.jxe --data=127.0.0.1:7000
Runs program.jxe and connects it to an already running Redis server at
port 7000 of the local host. Redis server can run outside the
local host (Redis needs to the configured to accept outside
connections).

To start more than one C node at a device use the following command.
djamrun program.jxe --num=4

To provide a set of tags to the program, use the following command.
jamrun program.jxe --tag="param1, param2"

Use the --bg option to run a command in the backgroud.

Usage: djamrun file.jxe [--app=appl_name] [--fog|--cloud] [--num=num_c_devs]
                                    [--data=data-url]
                                    [--tags=quoted_list_of_tags]
                                    [--bg]
                                    [--runon=container_to_run]


The djamrun command creates a run state in the $HOME/__jamrun folder.
EOF
}

checkdocker() {

    dockeravail=`which docker`
    if [ -z $dockeravail ]; then
        die "Docker not installed in this machine. Exiting!"
    fi
}


getcount() {
    local cvar=`cat $jamfolder/counter`
    ((cvar++))
    echo $cvar > $jamfolder/counter
    res=$cvar
}


# runatcloud $dockid $file $jappid $data $tags
runatcloud() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local tags=$5


    if [ -z $tags ]; then
        if [ -z $bg ]; then
            echo "-" > $appfolder/$dockid/tmuxid
            docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --cloud --data=$data
        else

            echo $dockid"-cloud" > $appfolder/$dockid/tmuxid
            tmux new-session -s $dockid docker exec -it  --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --cloud --data=$data
        fi
    else
        if [ -z $bg ]; then
            echo "-" > $appfolder/$dockid/tmuxid
            docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --cloud --data=$data --tag=$tags
        else
            echo $dockid"-cloud" > $appfolder/$dockid/tmuxid
            tmux new-session -s $dockid -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --cloud --data=$data --tag=$tags
        fi
    fi
}

# runatfog $dockid $file $jappid $data $tags
runatfog() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local tags=$5

    if [ -z $tags ]; then
        if [ -z $bg ]; then
            echo "-" > $appfolder/$dockid/tmuxid
            docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --fog --data=$data
        else
            echo $dockid"-fog" > $appfolder/$dockid/tmuxid
            tmux new-session -s $dockid -d  docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --fog --data=$data
        fi
    else
        if [ -z $bg ]; then
            echo "-" > $appfolder/$dockid/tmuxid
            docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --fog --data=$data --tag=$tags
        else
            echo $dockid"-fog" > $appfolder/$dockid/tmuxid
            tmux new-session -s $dockid -d  docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jamrun $file --app=$appid --fog --data=$data --tag=$tags
        fi
    fi
}

# runatdevice $dockid $file $jappid $data $num $tags
runatdevice() {
    local dockid=$1
    local file=$2
    local appid=$3
    local data=$4
    local num=$5
    local tags=$6

    echo $num > $appfolder/$dockid/cdevs

    # Start J
    if [ -z $tags ]; then
        if [ -z $bg ]; then
            echo "-" > $appfolder/$dockid/tmuxid
            tmux new-session -s $dockid"-dev" -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jrun $file --app=$appid --data=$data --group=$dockid
        else
            echo $dockid"-dev" > $appfolder/$dockid/tmuxid
            tmux new-session -s $dockid"-dev" -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jrun $file --app=$appid  --data=$data --group=$dockid
        fi

        for i in `seq 1 $num`; do
            tmux new-session -s $dockid"-dev-"$i -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid crun $file --app=$appid  --data=$data --group=$dockid
        done

        if [ -z $bg ]; then
            tmux attach-session -t $dockid"-dev"
        fi

    else
        if [ -z $bg ]; then
            echo "-" > $appfolder/$dockid/tmuxid
            tmux new-session -s $dockid"-dev" -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jrun $file --app=$appid --data=$data --group=$dockid
        else
            echo $dockid"-dev" > $appfolder/$dockid/tmuxid
            tmux new-session -s $dockid"-dev" -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid jrun $file --app=$appid  --data=$data --group=$dockid
        fi

        for i in `seq 1 $num`; do
            tmux new-session -s $dockid"-dev-"$i -d docker exec -it --env NODE_PATH=/usr/local/lib/node_modules $dockid crun $file --app=$appid  --data=$data --group=$dockid
        done

        if [ -z $bg ]; then
            tmux attach-session -t $dockid"-dev"
        fi

    fi

}


dojamrun() {
    local type=$1
    local dockid=$2
    local file=$4
    local num=$5

    echo $type > $appfolder/$dockid/machType
    echo $data > $appfolder/$dockid/dataStore
    echo $dockerSer > $appfolder/$dockid/dockerId
    echo "docker" > $appfolder/$dockid/class


    case $type in
        cloud)
            runatcloud $dockid $file $jappid $data $tags
            ;;
        fog)
            runatfog $dockid $file $jappid $data $tags
            ;;
        device)
            runatdevice $dockid $file $jappid $data $num $tags
            ;;
    esac
}


createdir() {
    local jpath=$1
    local jdir=$2
    # set a global directory..
    dirpath=$jpath/$jdir

    if [ ! -e $jpath/$jdir ]; then
        mkdir $jpath/$jdir
    fi
}

getappid() {
    local localf=$2
    local appid=$3

    if [ -e $jamfolder/counter ]; then
        local count=`cat $jamfolder/counter`
        ((count++))
        echo $count > $jamfolder/counter
    else
        local count=1
        echo $count > $jamfolder/counter
    fi

    if [ $appid == "app-n" ]; then
        if [ ! -e $appfolder/appid ]; then
            echo "app-"$count > $appfolder/appid
        fi
    else
        echo $appid > $appfolder/appid
    fi

    jappid=`cat $appfolder/appid`
}

make_container() {
    local type=$1
    local contname=$2

    local dockerImage=`cat $jamfolder/dockerImage`

    if [ ! -e $jamfolder/$type ]; then
        mkdir $jamfolder/$type
    fi

    if [ ! -e $jamfolder/$type/$contname ]; then
        mkdir $jamfolder/$type/$contname
    fi

    # Check if the build container is running..
    present=`docker ps --filter name=$contname | grep $contname | wc -l`
    if [ $present == "0" ]; then
        # Otherwise spawn one
        local dockerSer=`docker run -it -d --privileged --name $contname $dockerImage`
        local dockerSer=${dockerSer:0:12}
        echo $dockerSer > $jamfolder/$type/$contname/dockerId
        echo "1" > $jamfolder/$type/$contname/refCount
    else
        local rcount=`cat $jamfolder/$type/$contname/refCount`
        ((rcount++))
        echo $rcount > $jamfolder/$type/$contname/refCount
    fi
}


getdockerid() {
    local rundock=$1
    if [ -z $rundock ] || [ `docker ps --filter name=$rundock | grep $rundock | wc -l` == "0" ]; then
        getcount
        local count=$res
        dockerid="u-"$UID"-$type"$count
        make_container $type $dockerid
    else
        dockerid=$rundock
    fi
}

killdocker() {
    local dock_id=$1

    if [ -e $jamfolder/$type/$dock_id ]; then
        local rcount=`cat $jamfolder/$type/$dock_id/refCount`
        ((rcount--))
        echo $rcount > $jamfolder/$type/$dock_id/refCount
        if [ $rcount == 0 ]; then
            docker kill `cat $jamfolder/$type/$dock_id/dockerId`
            docker rm $dock_id
        fi
    fi
}


removetmux() {
    local tmid=$1

    tmux has-session -t $tmid 2>/dev/null
    local res=$?
    if [ $res == "0" ]; then
        tmux kill-session -t $tmid
    fi
}

removedockermach() {

    local tmid=`cat $folder/$dockerid/tmuxid`
    removetmux $tmid

    if [ -e $folder/$dockerid/cdevs ]; then
        local num=`cat $folder/$dockerid/cdevs`
        for i in `seq 1 $num`; do
            removetmux $tmid"-"$i
        done
    fi

    killdocker $dockerid

}


processjxe() {
    result="ok"
}

# Initialize all the option variables.
app=app-n
type=device
data=docker:6379
tags=
num=1
bg=
runon=


file=$1
shift
fext="${file##*.}"

if [ -z $file ] || [ $file = "-h" ] || [ $file = "--help" ]; then
    show_usage
    exit 1
fi

if [ "$fext" != "jxe" ]; then
    die "Extension on $file is not .jxe"
fi


while :; do
    case $1 in
        -h|-\?|--help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        -a|--app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)            # Handle the case of an empty
            die 'ERROR: "--app" requires a non-empty option argument.'
            ;;
        -o|--runon)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                runon=$2
                shift
            else
                die 'ERROR: "--runon" requires a non-empty option argument.'
            fi
            ;;
        --runon=?*)
            runon=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --runon=)            # Handle the case of an empty
            die 'ERROR: "--runon" requires a non-empty option argument.'
            ;;
        -s|--tags)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                tags=$2
                shift
            else
                die 'ERROR: "--tags" requires a non-empty option argument.'
            fi
            ;;
        --tags=?*)
            tags=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --tags=)            # Handle the case of an empty
            die 'ERROR: "--tags" requires a non-empty option argument.'
            ;;
        -n|--num)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                num=$2
                shift
            else
                die 'ERROR: "--num" requires a non-empty option argument.'
            fi
            ;;
        --num=?*)
            num=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --num=)            # Handle the case of an empty
            die 'ERROR: "--num" requires a non-empty option argument.'
            ;;
        -d|--data)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                data=$2
                shift
            else
                die 'ERROR: "--data" requires a non-empty option argument.'
            fi
            ;;
        --data=?*)
            data=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --data=)            # Handle the case of an empty
            die 'ERROR: "--data" requires a non-empty option argument.'
            ;;
        -f|--fog)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="fog"
                num=
            fi
            ;;
        -c|--cloud)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="cloud"
                num=
            fi
            ;;
        -b|--bg)
            bg=1
            ;;
        --)              # End of all options.
            shift
            break
        ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# Check necessary parameters and set defaults

if [ "$type" != "device" ] && [ -n "$num" ]; then
    die "number of devices can't be speciied for fog/cloud"
fi

# If docker is not installed, we fail here
checkdocker

if [ -e "$file" ]; then

    # Check whether the global __jamruns folder is there
    jamfolder=$HOME"/__jamruns"
    if [ ! -d $jamfolder ]; then
        mkdir $jamfolder
    fi
    # Get the folder
    filenoext="${file%.*}"
    appfolder=$HOME"/__jamruns/"$filenoext"_"$app
    if [ ! -d "$appfolder" ]; then
        mkdir $appfolder
    fi

    # process the .jxe file
    file=`pwd`/$file
    processjxe $file
    if [ $result != "ok" ]; then
        die "Problem with JAMScript executable"
    fi

    # cd into the $appfolder
    cd $appfolder
    getappid $app
    getdockerid $ruon
    createdir $appfolder $dockerid
    dojamrun $type $dockerid `basename $file` $num
    if [ -z $bg ]; then
        removedockermach
    fi

else
    die "File: $file not found"
fi

#!/bin/bash

# No need to edit below this line unless you find a bug!

die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF

djamtest
Creates a test configuration of containers. Does not run JAMScript. One cloud node
(u-UID-test-cloud), two fog nodes (u-UID-test-fog-1) and (u-UID-test-fog-2). The fog
nodes are in different zones. It also creates two device nodes (u-UID-test-dev-1) and
(u-UID-test-dev-2).

You can login into the different nodes and ping each other to test the inter-container
latency.

All machines are detached. You need to attach to them again using:

docker attach node-name

EOF
}



killrouterpumba() {

    local pid=`ps axw | grep pumba | grep router | awk '{split($0,a, " "); print a[1]}'`
    if [ ! -z $pid ]; then
        kill $pid
    fi
}

startrouterpumba() {

    local routercmd=`cat $jamfolder/pumba/outfog_cmd`
    $routercmd $@ &
}

restartrouterpumba() {

    killrouterpumba
    startrouterpumba $@
}


killfogpumba() {

    local pid=`ps axw | grep pumba | grep fog | awk '{split($0,a, " "); print a[1]}'`
    if [ ! -z $pid ]; then
        kill $pid
    fi
}

startfogpumba() {

    local fogcmd=`cat $jamfolder/pumba/infog_cmd`
    $fogcmd $@ &
}

restartfogpumba() {

    killfogpumba
    startfogpumba $@
}


killcloudpumba() {

    local pid=`ps axw | grep pumba | grep cloud | awk '{split($0,a, " "); print a[1]}'`
    if [ ! -z $pid ]; then
        kill $pid
    fi
}

startcloudpumba() {

    local cloudcmd=`cat $jamfolder/pumba/cloud_cmd`
    $cloudcmd $@ &
}

restartcloudpumba() {

    killcloudpumba
    startcloudpumba $@
}


createnetwork() {

    docker network create --driver=bridge --subnet=10.54.0.0/16 --ip-range=10.54.0.0/16 jamtest
}

startzonerouter() {
    local zonenum=$1
    # Create the machine
    docker run -it -d --name $2 --network=jamtest --ip=10.54.$zonenum.254 $dockerImage
}


startzonemach() {
    local zonenum=$1
    if [ ! -e $jamfolder/zones ]; then
        mkdir $jamfolder/zones
    fi
    if [ ! -e $jamfolder/zones/count ]; then
        echo "10" > $jamfolder/zones/count
    fi
    local count=`cat $jamfolder/zones/count`
    ((count++))
    echo $count > $jamfolder/zones/count

    # Create the machine
    docker run -it -d --name $2 --network=jamtest --ip=10.54.$zonenum.$count --cap-add=NET_ADMIN $dockerImage

    # Setup the routes
    docker exec -d $2 ip route del 10.54/16
    docker exec -d $2 ip route add 10.54.0/24 dev eth0
    docker exec -d $2 ip route add 10.54.$zonenum/24 dev eth0
    docker exec -d $2 ip route add 10.54/16 via 10.54.$zonenum.254

}

startglobalmach() {

    if [ ! -e $jamfolder/global ]; then
        mkdir $jamfolder/global
    fi
    if [ ! -e $jamfolder/global/count ]; then
        echo "10" > $jamfolder/global/count
    fi
    local count=`cat $jamfolder/global/count`
    ((count++))
    echo $count > $jamfolder/global/count

    # Create the machine
    docker run -it -d --name $1 --network=jamtest --ip=10.54.0.$count $dockerImage

}

jamfolder=$HOME"/__jamruns"
if [ ! -e $jamfolder ]; then
    die "JAMScript emulation is not yet initialized. Run djaminit first."
fi

if [ ! -z $1 ]; then
    if [ $1 == "-h" ] || [ $1 == "--help" ]; then
        show_usage
        exit
    fi
fi



if [ ! -e $jamfolder/pumba/cloud_cmd ]; then
    die "Run 'djam init' before running the 'djam test'. "
fi

if [ ! -e $jamfolder/pumba/infog_cmd ]; then
    die "Run 'djam init' before running the 'djam test'. "
fi

if [ ! -e $jamfolder/pumba/outfog_cmd ]; then
    die "Run 'djam init' before running the 'djam test'. "
fi


# Image
dockerImage=`cat $jamfolder/dockerImage`

createnetwork

# These containers are not created in the proper way
# This is for testing purposes.. so this is OK.

# Start a cloud machine
startglobalmach "u-$UID-cloud-test"

startzonerouter 1
startzonerouter 2

# Start two fog machines

startzonemach 1 "u-$UID-fog-test-1"
startzonemach 1 "u-$UID-dev-test-1"

startzonemach 2 "u-$UID-fog-test-2"
startzonemach 2 "u-$UID-dev-test-2"

restartcloudpumba "u-$UID-cloud-test"
restartrouterpumba "u-$UID-router-test-1" "u-$UID-router-test-2"
restartfogpumba "u-$UID-fog-test-1" "u-$UID-fog-test-2"

# Print a message
echo "Done. Configured the test topology."

#!/bin/bash

# Spin up the build container if it is not there.
# No need to spin up if the container is already there

# Copy the files into the container
# Run the jamc compiler in the container using 'docker exec..'
# Get the results back - copy the .jxe file back to the original folder
#


die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF

djamcompile or djamcompile -h or djamcompile --help prints this help
information.

djamcompile f1.jxe f2.c
compiles f1.js and f2.c to obtain f1.jxe. Here, the source files are
copied into the docker container and the compiler is run in the container.
The resulting file f1.jxe is copied back to the host.

EOF
}

make_container() {
    local type=$1
    local contname=$2

    local dockerImage=`cat $jamfolder/dockerImage`

    if [ ! -e $jamfolder/type ]; then
        mkdir $jamfolder/type
    fi

    if [ ! -e $jamfolder/type/contname ]; then
        mkdir $jamfolder/type/contname
    fi

    # Check if the build container is running..
    present=`docker ps --filter name=$contname | grep $contname | wc -l`
    if [ $present == "0" ]; then
        # Otherwise spawn one
        local dockerSer=`docker run -it -d --privileged --name $contname $dockerImage`
        local dockerSer=${dockerSer:0:12}
        echo $dockerSer > $jamfolder/type/contname/dockerId
        echo "1" > $jamfolder/type/contname/refCount
    else
        if [ ! -e $jamfolder/type/contname/refCount ]; then
            echo "0" > $jamfolder/type/contname/refCount
        fi
        local rcount=`cat $jamfolder/type/contname/refCount`
        ((rcount++))
        echo $rcount > $jamfolder/type/contname/refCount
    fi
}

jamfolder=$HOME"/__jamruns"
if [ ! -d $jamfolder ]; then
    echo "JAMScript not setup in the system."
    exit 0
fi


dbuildc="dbuildctnr-"$UID
make_container test $dbuildc

docker cp $1 $dbuildc:$1
docker cp $2 $dbuildc:$2

docker exec -it $dbuildc jamc $1 $2
filename=$1
jxefile="${filename%.*}.jxe"
docker cp $dbuildc:$jxefile $jxefile

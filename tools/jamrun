#!/bin/bash

# Edit the following locations to provide the
MOSQUITTO=`which mosquitto`
if [ -z $MOSQUITTO ]; then
    MOSQUITTO=/usr/local/sbin/mosquitto
fi
MOSQUITTO_PUB=`which mosquitto_pub`
if [ -z $MOSQUITTO_PUB ]; then
    MOSQUITTO_PUB=/usr/local/bin/mosquitto_pub
fi
TMUX=`which tmux`
if [ -z $TMUX ]; then
    die "Warning tmux not found"
fi

# No need to edit below this line unless you find a bug!
## Some functions used in this script


die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF
Usage: jamrun file.jxe [--app=appl_name] [--fog|--cloud] [--num=num_c_devs]
                                    [--data=data-url]
                                    [--tags=quoted_list_of_tags]

The jamrun command runs the given JAM executable (file.jxe).
You specify the node type to run: cloud, fog, or device (by default).
With device you start a J instance and one or more C instances.
With cloud or fog, you start on J instances (one for each invocation).

The --port option is useful to start multiple J components in the same machine.
The jamrun command will start the MQTT broker in the given port if the broker is not
running at the time. The MQTT broker will continue to run after the application
has completed execution. The --data option takes a URL pointing to the data
depot (Redis instance) to be used by the jdata subsystem.

EOF
}


startmqtt() {
    local port=$1

    # Check whether the MQTT server is running.. if not start it
    $MOSQUITTO_PUB -p $port -t "test" -m "hello"
    if [ $? -ne 0 ]; then
        echo "MQTT is not running at $port"
        echo "Attempting to start MQTT at $port"
        $MOSQUITTO -p $port &
    fi
}

dojamout() {
    local type=$1
    local pnum=$2

    startmqtt $pnum

    case $type in
        cloud)
            if [ -z "$tags" ]; then
                node jamout.js --app=$app --cloud --port=$pnum --data=$data
            else
                node jamout.js --app=$app --cloud --port=$pnum --data=$data --tags=$tags
            fi
            ;;
        fog)
            if [ -z "$tags" ]; then
                node jamout.js --app=$app --fog --port=$pnum --data=$data
            else
                node jamout.js --app=$app --fog --port=$pnum --data=$data --tags=$tags
            fi
            ;;
        device)
            if [ -z "$tags" ]; then
                node jamout.js --app=$app --port=$pnum --data=$data
            else
                node jamout.js --app=$app --port=$pnum --data=$data --tags=$tags
            fi
            ;;
    esac
}

doaout() {
    local counter=1
    local indx=0
    local num=$1
    local port=$2
    if [ -e a.out ]; then
        chmod +x a.out
    fi
    while [ $counter -le $num ]; do
        if [ -e a.out ]; then
            # execute the program.. we are in the folder..
            $TMUX send-keys -t $tmuxapp:0.$indx "./a.out -j -a $app -p $port -n $counter" C-m
        fi
        ((counter++))
        ((indx++))
    done
}

# This is always scanning for a command with 'node'
portavailable() {
    local folder=$1
    local port=$2

    if [ -d $folder/$port ]; then
        if [ -e $folder/$port/processId ]; then
            local pid=`cat $folder/$port/processId`
            if [ ! -z $pid ]; then
                porttaken=`ps -p $pid | grep node | wc -l`
            else
                porttaken=0
            fi
        else
            porttaken=0
        fi
    else
        porttaken=0
    fi

}


setuptmux() {
    tmuxapp=$app_$1

    if [ "$type" == "device" ]; then
        $TMUX new -s $tmuxapp -d
        counter=1
        while [ $counter -le $num ]; do
            $TMUX split-window -v -t $tmuxapp
            $TMUX select-layout -t $tmuxapp tiled
            ((counter++))
        done
    fi
}

# Initialize all the option variables.
app=testapp
type=device
data=127.0.0.1
num=1
tags=
porttaken=0

file=$1
shift
fext="${file##*.}"

if [ -z $file ] || [ $file = "-h" ]; then
    show_usage
    exit 1
fi

if [ "$fext" != "jxe" ]; then
    die "Extension on $file is not .jxe"
fi

# Check the required commands..
if [ ! -e $MOSQUITTO ]; then
    die "Mosquitto MQTT broker $MOSQUITTO not found. Set new location."
fi
if [ ! -e $MOSQUITTO_PUB ]; then
    die "Mosquitto tools $MOSQUITTO_PUB not found. Set new location."
fi
if [ ! -e $TMUX ]; then
    die "terminal multiplexor $TMUX not found. Set new location."
fi


while :; do
    case $1 in
        -h|-\?|--help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        -a|--app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)            # Handle the case of an empty
            die 'ERROR: "--args" requires a non-empty option argument.'
            ;;
        -s|--tags)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                tags=$2
                shift
            else
                die 'ERROR: "--tags" requires a non-empty option argument.'
            fi
            ;;
        --tags=?*)
            tags=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --tags=)            # Handle the case of an empty
            die 'ERROR: "--tags" requires a non-empty option argument.'
            ;;
        -n|--num)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                num=$2
                shift
            else
                die 'ERROR: "--num" requires a non-empty option argument.'
            fi
            ;;
        --num=?*)
            num=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --num=)            # Handle the case of an empty
            die 'ERROR: "--num" requires a non-empty option argument.'
            ;;
        -d|--data)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                data=$2
                shift
            else
                die 'ERROR: "--data" requires a non-empty option argument.'
            fi
            ;;
        --data=?*)
            data=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --data=)            # Handle the case of an empty
            die 'ERROR: "--data" requires a non-empty option argument.'
            ;;
        -f|--fog)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="fog"
                num=
            fi
            ;;
        -c|--cloud)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="cloud"
                num=
            fi
            ;;
        --)              # End of all options.
            shift
            break
        ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# Check necessary parameters and set defaults

if [ "$type" != "device" ] && [ -n "$num" ]; then
    die "number of devices can't be speciied for fog/cloud"
fi


if [ -e "$file" ]; then


    jamfolder=$HOME"/__jamruns"
    if [ ! -d $jamfolder ]; then
        mkdir $jamfolder
    fi
    # Get the folder
    filenoext="${file%.*}"
    folder=$HOME"/__jamruns/"$filenoext"_"$app
    if [ ! -d "$folder" ]; then
        mkdir $folder
    fi

    # unzip the executable in the folder and run it..
    # We are unzipping the copying the files no matter what!
    unzip -oq $file -d $folder
    if [ $? -ne 0 ]; then
        die "Problem reading file: $file"
    fi

    cd $folder


    if [ -e jamout.js ]; then
        # execute the program.. we are in the folder..

        case $type in
            cloud)
                iport=9883
                while [ : ]; do
                    portavailable $folder $iport
                    [[ $porttaken == 1 ]] || break
                    ((iport++))
                done
                dojamout $type $iport
            ;;
            fog)
                iport=5883
                while [ : ]; do
                    portavailable $folder $iport
                    [[ $porttaken == 1 ]] || break
                    ((iport++))
                done
                dojamout $type $iport
            ;;
            device)
                iport=1883
                echo "Hello... "
                while [ : ]; do
                    portavailable $folder $iport
                    echo "Porttaken " $porttaken
                    if [ $porttaken == 0 ]; then
                        break
                    fi
                    echo "Incrementing..."
                    ((iport++))
                done
                setuptmux $iport
                doaout $num $iport
                dojamout $type $iport
            ;;
        esac
    else
        die "File: $file is not a valid JAMScript executable"
    fi

else
    die "File: $file not found"
fi

#!/bin/sh

die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF
Usage: jamrun file.jxe --app=appl_name [--fog|--cloud] [--num=num_c_devs]
                                    [--port=port_number] [--data=data-url]
                                    [--force]
The jamrun command runs the given JAM executable (file.jxe).
You specify the node type to run: cloud, fog, or device (by default).
With device you start a J instance and one or more C instances.
With cloud or fog, you start on J instances (one for each invocation).

The --port option is useful to start multiple J components in the same machine.
The jamrun command will start the MQTT broker in the given port if the broker is not
running at the time. The MQTT broker will continue to run after the application
has completed execution. The --data option takes a URL pointing to the data
depot (Redis instance) to be used by the jdata subsystem.

Use the --force option to use the latest version of the JAM executable.

EOF
}

# Initialize all the option variables.
app=
port=
type=device
data=127.0.0.1
num=1
force=

file=$1
shift

if [ $file = "-h" ]; then
    show_usage
fi

while :; do
    case $1 in
        -h|-\?|--help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        -a|--app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)            # Handle the case of an empty
            die 'ERROR: "--app" requires a non-empty option argument.'
            ;;
        -p|--port)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                port=$2
                shift
            else
                die 'ERROR: "--port" requires a non-empty option argument.'
            fi
            ;;
        --port=?*)
            port=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --port=)            # Handle the case of an empty
            die 'ERROR: "--port" requires a non-empty option argument.'
            ;;
        -n|--num)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                num=$2
                shift
            else
                die 'ERROR: "--num" requires a non-empty option argument.'
            fi
            ;;
        --num=?*)
            num=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --num=)            # Handle the case of an empty
            die 'ERROR: "--num" requires a non-empty option argument.'
            ;;
        -d|--data)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                data=$2
                shift
            else
                die 'ERROR: "--data" requires a non-empty option argument.'
            fi
            ;;
        --data=?*)
            data=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --data=)            # Handle the case of an empty
            die 'ERROR: "--data" requires a non-empty option argument.'
            ;;
        -f|--fog)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="fog"
                num=
            fi
            ;;
        -c|--cloud)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="cloud"
                num=
            fi
            ;;
        -r|--force)
            force=1
            ;;
        --)              # End of all options.
            shift
            break
        ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# Check necessary parameters and set defaults

if [ -z "$app" ]; then
    die "--app option needs to be specified."
fi

if [ "$type" != "device" ] && [ -n "$num" ]; then
    die "number of devices can't be speciied for fog/cloud"
fi


if [ -e "$file" ]; then

    # First start the J node: cloud, fog, or device.

    # Check whether the MQTT server is running.. if not start it
    if [ -z "$port" ]; then
        port=1883
    fi
    mosquitto_pub -p $port -t "test" -m "hello"
    if [ $? -ne 0 ]; then
        echo "MQTT is not running at " $port
        echo "Attempting to start MQTT at" $port
        /usr/local/sbin/mosquitto -p $port &
    fi

    # Get the folder
    filenoext="${file%.*}"
    folder=$filenoext"_"$app
    if [ ! -d "$folder" ]; then
        mkdir $folder
    fi

    # unzip the executable in the folder and run it..
    if [ -n "$force" ]; then
        unzip $file -d $folder
        if [ $? -ne 0 ]; then
            die "Problem reading the .jxe file "
        fi
    else
        if [ ! -e $folder/jamout.js ] && [ ! -e $folder/a.out ]; then
            unzip $file -d $folder
            if [ $? -ne 0 ]; then
                die "Problem reading the .jxe file "
            fi
        fi
    fi

    cd $folder
    if [ -e jamout.js ]; then
        # execute the program.. we are in the folder..
        case $type in
            cloud)
                node jamout.js --app=$app --cloud --port=$port --data=$data
                ;;
            fog)
                node jamout.js --app=$app --fog --port=$port --data=$data
                ;;
            device)
                # First start the C nodes...
                counter=1
                while [ $counter -le $num ]; do
                    if [ -e a.out ]; then
                        chmod +x a.out
                        # execute the program.. we are in the folder..
                        ./a.out -a $app -n $counter &
                    fi
                    ((counter++))
                done

                # This start the J node
                node jamout.js --app=$app --port=$port --data=$data
                ;;
        esac
    else
        die "Not a valid .jxe file"
    fi

    # Give sufficient time for the node process to start.
    # Otherwise the C client would not connect..
    sleep 2

    # Next start the C node. We could start a number of them
    if [ "$type" == "device" ]; then
        counter=1

    fi

else
    die ".jxe file not found"
fi

#!/bin/bash

# Edit the following locations to provide the correct location if needed
TMUX=`which tmux`
if [ -z $TMUX ]; then
    TMUX=/usr/local/bin/tmux
fi

# No need to edit below this line unless you find a bug!

die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF
Usage: jamlist [--app=appl_name]

Lists details about all activated instances of JAMScript programs. Use the --app=X
option to limit the listing to programs that match the given name (i.e., X).

EOF
}

checkprocess() {
    local pid=`cat $1/processId`
    local present=`ps -p $pid | grep node | wc -l`
    if [ $present == "1" ]; then
        running="true"
    else
        running="false"
    fi
}



printappl() {

    local prog=`echo $1 | awk '{split($0,a,"_"); print a[1]}'`
    local appl=`echo $1 | awk '{split($0,a,"_"); split(a[2],b, "/"); print b[1]}'`

    echo "PROGRAM $prog AS $appl"
}

printnodeinfo() {
    local port=$1
    local mtype=`cat $2/machType`
    if [ $mtype == "device" ]; then
        local temp=`ls $2/cdeviceId.*`
        local cdevs=`echo $temp | awk '{n=split($0, a, "__")} END{print n-1}'`
        echo -e "\t$mtype\tat port $port with $cdevs C nodes"
    else
        echo -e "\t$mtype\tat port $port"
    fi
}


app=


while :; do
    case $1 in
        -h|-\?|--help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        -a|--app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)            # Handle the case of an empty
            die 'ERROR: "--app" requires a non-empty option argument.'
            ;;
        --)              # End of all options.
            shift
            break
        ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

jamfolder=$HOME"/__jamruns"
if [ ! -d $jamfolder ]; then
    echo "No running instances of JAMScript."
    exit 0
fi

cd $jamfolder

for jruns in */; do
    if [[ $jruns =~ .*$app.* ]]; then
        printappl $jruns
        for jexs in `ls $jamfolder/$jruns`; do
            dir=$jamfolder/$jruns$jexs
            if [ -d $dir ]; then
                checkprocess $dir
                if [ $running == "true" ]; then
                    printnodeinfo $jexs $dir
                fi
            fi
        done
    fi
done

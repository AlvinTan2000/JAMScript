// Dependencies
var JsonMLWalker = require('../../jsonml/grammars/jsonml_walker.ojs'),
    _            = require('../nodes'),
    join         = require('../../utils.js').join,
    escape       = require('../../utils.js').escape_string;

/*
What are the rules?

  1. if a block is not empty create a new line and indent the content.
  2. Everything that ends with } does not need to be terminated with a ';' (Like Functions)
  3. If Function is not the first statement it needs one line of space above
*/
ometa ES5Pretty <: JsonMLWalker {
                      
  // Helper rule                   
  assure_block       = ~undefined :n ( ?n.hasType('BlockStmt') walk(n)                   //     {...} -> {...}
                                     | walk(_.BlockStmt([n]))                            //       ... -> {...}
                                     ),

  // Node Translations
  Program         :n = walk*:cs                                                          -> cs.join(';\n'),

  Function        :n = walk:args walk:body ( ?n.has('id')                                -> join('function ', n.id(), '(', args.join(', '), ') ', body) 
                                           | empty                                       -> join('function(', args.join(', '), ') ', body)
                                           ),
  FunctionArgs    :n = walk*:as                                                          -> as,


  // Literals
  Id              :n                                                                     -> n.value(),

  Number          :n = ?n.is('kind', 'hex')                                              -> join('0x', n.value().toString(16))
                     | ?n.is('value', parseFloat(n.original()))                          -> n.original()           // if something changed then don't 
                     | empty                                                             -> n.value().toString(),  // use the original string representation 

  String          :n                                                                     -> join('"', escape(n.value()), '"'),

   
  // Statements
  BlockStmt       :n = walk+:cs                                                          -> join('{\n', this.indent(this.join_sc(cs)), '\n}')
                     | empty                                                             -> '{}',

  VarDeclStmt     :n = walk+:vs                                                          -> join(n.kind(), ' ', this.indent(vs.join(',\n'), { 
                                                                                              width: n.kind().length + 1, 
                                                                                              first_line: false 
                                                                                            })),

  VarBinding      :n = undefined                                                         -> n.name()
                     | &anything:i ?i.hasType('Id') ?i.is('value', 'undefined') anything -> n.name()
                     | walk:init                                                         -> join(n.name(), ' = ', init),

  EmptyStmt       :n                                                                     -> '',
  
  IfStmt          :n = walk:c assure_block:t ( assure_block:f                            -> join('if(', c, ') ', t, ' else ', f)
                                             | (undefined | empty)                       -> join('if(', c, ') ', t)
                                             ), 

  LabeledStmt     :n = walk:s                                                            -> join(n.label(), ': ', s),

  BreakStmt       :n = ?(n.label() !== undefined)                                        -> join('break ', n.label())
                     | empty                                                             -> 'break',

  ContinueStmt    :n = ?(n.label() !== undefined)                                        -> join('continue ', n.label())
                     | empty                                                             -> 'continue',

  ReturnStmt      :n = walk:e ( ?(e !== undefined)                                       -> join('return ', e)
                              | empty                                                    -> 'return' 
                              ),

  ThrowStmt       :n = walk:e                                                            -> join('throw ', e),

  WithStmt        :n = walk:e assure_block:s                                             -> join('with(', e,') ', s),

  SwitchStmt      :n = walk:e ( walk+:cs                                                 -> join('{\n', this.indent(cs.join('\n')), '\n}')
                              | empty                                                    -> join('switch(', e, ') {}')
                              ),

  SwitchCase      :n = ?n.is('default_case') ( walk+:ss                                  -> join('default:\n', this.indent(this.join_sc(ss)))
                                             | empty                                     -> 'default:'
                                             )
                                             
                     | walk:e                ( walk+:ss                                  -> join('case ', e, ':\n', this.indent(this.join_sc(ss)))
                                             | empty                                     -> join('case ', e, ':')
                                             ),

  TryStmt         :n = walk:t walk:ce assure_block:c ( undefined                         -> join('try ', t, ' catch(',ce,') ', c)
                                                     | assure_block:f                    -> join('try ', t, ' catch(',ce,') ', c, ' finally ', f)
                                                     )
                     | walk:t assure_block:f                                             -> join('try ', t, ' finally ', f),

  WhileStmt       :n = walk:ce assure_block:s                                            -> join('while(', ce, ') ', s),

  DoWhileStmt     :n = assure_block:s walk:ce                                            -> join('do ', s, ' while(', ce, ')'),

  ForStmt         :n = walk:ie walk:ce walk:ue assure_block:s                            -> join('for(', ie, '; ', ce, '; ', ue, ') ', s),

  ForInStmt       :n = walk:vs walk:ce assure_block:s                                    -> join('for(', vs, ' in ', ce, ') ', s),

  DebuggerStmt    :n                                                                     -> 'debugger',


  // Expressions
  ThisExpr        :n                                                                     -> 'this',

  AssignExpr      :n = walk:lhs walk:rhs                                                 -> join(lhs, ' ', n.operator(), ' ', rhs),

  CondExpr        :n = walk:ce walk:t walk:f                                             -> join(ce, ' ? ', t, ' : ', f),

  UnaryExpr       :n = walk:e ( ?n.operator().match(/^[+-~!]$/)                          -> join(n.operator(), e)
                              | empty                                                    -> join(n.operator(), ' ', e)
                              ),

  UpdateExpr      :n = walk:e ( ?n.is('prefix')                                          -> join(n.operator(), e)
                              | empty                                                    -> join(e, n.operator())
                              ),

  BinaryExpr      :n = walk:lhs walk:rhs                                                 -> join(lhs, ' ', n.operator(), ' ', rhs),

  SequenceExpr    :n = walk*:es                                                          -> es.join(', '),

  NewExpr         :n = walk:cls                                                          -> join('new ', cls),

  CallExpr        :n = walk:e walk*:args                                                 -> join(e, '(', args.join(', '), ')'),

  MemberExpr      :n = ?n.is('access', 'name') walk:e                                    -> join(e, '.', n.name())
                     | walk:e walk:ae                                                    -> join(e, '[', ae, ']'),

  GroupExpr       :n = walk:e                                                            -> join('(', e, ')'),
  
  // TODO
  ArrayExpr       :n = walk*:es                                                          -> join('[', es.join(', '), ']'),

  // TODO
  ObjectExpr      :n = walk*:ps                                                          -> join('{\n', this.indent(ps.join(',\n')), '\n}'),

  PropertyBinding :n = ?n.is('kind', 'init') walk:id walk:e                              -> join(id, ': ', e)
                     | walk:id walk:args walk:body                                       -> join(n.kind(), ' ', id, '(', args.join(','), ')', body),

  RegExpr         :n                                                                     -> join('/', n.body(), '/', n.flags())

}
// join with semicolons and linebreaks
ES5Pretty.join_sc = function(cs) {

  var output = [];
      
  for(var i = 0; i < cs.length; i++) {
    
    // does not end with }
    if(!cs[i].match(/}$/))
      output.push(cs[i] + ';');
    else
      output.push(cs[i]);
  }
  return output.join('\n');
};

ES5Pretty.indent = function(source, opts) {

  opts = opts || {};
  
  function defaults(key, value) { if(typeof opts[key] == 'undefined') opts[key] = value; }
  
  defaults('width',      this.tab_width);
  defaults('first_line', true);
  
  var space = Array(opts.width+1).join(' ');
  return (opts.first_line ? space : '') + source.split('\n').join('\n' + space);
};

ES5Pretty.tab_width = 4;
ES5Pretty.force_rules = true;
ES5Pretty.translate = function(input) {
  return ES5Pretty.match(input, 'walk');
};

module.exports = ES5Pretty;

#!/usr/local/bin/node

var c    = require('./lib/c'),
    fs   = require('fs');


function assure(file, extension) {
    if(fs.existsSync(file))
        return file;

    if(fs.existsSync(file + extension))
        return file + extension;

    throw "File does not exist: " + file;
}

var cmd = {

    /**
     * JAM compiler needs to output two different strings.
     * One for the C output and another for the JavaScript output.
     */
    compile: function(source, target) {
        var code   = fs.readFileSync(assure(source, ext.source), 'utf8'),
        result = c.compile(code);

        if(typeof target === 'undefined')
            console.log(result);

        else
            fs.writeFileSync(assure(target, ext.target), result, 'utf8');
    },

    /**
     * TODO add support for directory
     * if it is a directory the inotify evt includes a property 'name' - the filename
     */
    watch: function(source, target) {
        var inot = require('inotify');

        if(typeof inot == 'undefined')
            throw "Please install dependency 'node-inotify' (https://github.com/c4milo/node-inotify)";

        var Inotify  = inot.Inotify,
            watcher  = new Inotify(),
            abs_path = path.resolve(process.cwd(), source);

        watcher.addWatch({
            path: abs_path,
            watch_for: Inotify.IN_MODIFY,
            callback: function(evt) {
                console.log("Detected change of", evt);
                cmd.compile(source, target);
                console.log("Compiled", source);
            }
        });

        console.log("Listening on", abs_path);
    },

    run: function(file) {
        require(path.resolve(process.cwd(), assure(file, ext.source)));
    }
}

var commands = "  compile SOURCE [TARGET]\n  run SOURCE\n  watch SOURCE TARGET"

if(process.argv[2] === undefined)
    throw "Please specify action to execute as first parameter:\n" + commands;

var action = cmd[process.argv[2]];

if(typeof action !== 'function')
    throw "Not a valid action, try:\n" + commands;

// Execute Action
action.apply(this, process.argv.slice(3));
